//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        (unknown)
// source: mconfigs.proto

package mconfig

import (
	protos "github.com/go-magma/magma/lib/go/protos"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//------------------------------------------------------------------------------
// Control Proxy configs
//------------------------------------------------------------------------------
type ControlProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *ControlProxy) Reset() {
	*x = ControlProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlProxy) ProtoMessage() {}

func (x *ControlProxy) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlProxy.ProtoReflect.Descriptor instead.
func (*ControlProxy) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{0}
}

func (x *ControlProxy) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// DnsD configs
//------------------------------------------------------------------------------
type DnsD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel          protos.LogLevel                 `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	EnableCaching     bool                            `protobuf:"varint,2,opt,name=enable_caching,json=enableCaching,proto3" json:"enable_caching,omitempty"`
	LocalTTL          int32                           `protobuf:"varint,3,opt,name=localTTL,proto3" json:"localTTL,omitempty"`
	Records           []*NetworkDNSConfigRecordsItems `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
	DhcpServerEnabled bool                            `protobuf:"varint,5,opt,name=dhcp_server_enabled,json=dhcpServerEnabled,proto3" json:"dhcp_server_enabled,omitempty"`
}

func (x *DnsD) Reset() {
	*x = DnsD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsD) ProtoMessage() {}

func (x *DnsD) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsD.ProtoReflect.Descriptor instead.
func (*DnsD) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{1}
}

func (x *DnsD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *DnsD) GetEnableCaching() bool {
	if x != nil {
		return x.EnableCaching
	}
	return false
}

func (x *DnsD) GetLocalTTL() int32 {
	if x != nil {
		return x.LocalTTL
	}
	return 0
}

func (x *DnsD) GetRecords() []*NetworkDNSConfigRecordsItems {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *DnsD) GetDhcpServerEnabled() bool {
	if x != nil {
		return x.DhcpServerEnabled
	}
	return false
}

type NetworkDNSConfigRecordsItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ARecord     []string `protobuf:"bytes,1,rep,name=a_record,json=aRecord,proto3" json:"a_record,omitempty"`
	AaaaRecord  []string `protobuf:"bytes,2,rep,name=aaaa_record,json=aaaaRecord,proto3" json:"aaaa_record,omitempty"`
	CnameRecord []string `protobuf:"bytes,3,rep,name=cname_record,json=cnameRecord,proto3" json:"cname_record,omitempty"`
	Domain      string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *NetworkDNSConfigRecordsItems) Reset() {
	*x = NetworkDNSConfigRecordsItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDNSConfigRecordsItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDNSConfigRecordsItems) ProtoMessage() {}

func (x *NetworkDNSConfigRecordsItems) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDNSConfigRecordsItems.ProtoReflect.Descriptor instead.
func (*NetworkDNSConfigRecordsItems) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkDNSConfigRecordsItems) GetARecord() []string {
	if x != nil {
		return x.ARecord
	}
	return nil
}

func (x *NetworkDNSConfigRecordsItems) GetAaaaRecord() []string {
	if x != nil {
		return x.AaaaRecord
	}
	return nil
}

func (x *NetworkDNSConfigRecordsItems) GetCnameRecord() []string {
	if x != nil {
		return x.CnameRecord
	}
	return nil
}

func (x *NetworkDNSConfigRecordsItems) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type ImageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Order int64  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ImageSpec) Reset() {
	*x = ImageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSpec) ProtoMessage() {}

func (x *ImageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSpec.ProtoReflect.Descriptor instead.
func (*ImageSpec) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{3}
}

func (x *ImageSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageSpec) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MagmaD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// Interval for the gateways to send checkin rpc calls to the cloud.
	CheckinInterval int32 `protobuf:"varint,2,opt,name=checkin_interval,json=checkinInterval,proto3" json:"checkin_interval,omitempty"`
	// Checkin rpc timeout
	CheckinTimeout int32 `protobuf:"varint,3,opt,name=checkin_timeout,json=checkinTimeout,proto3" json:"checkin_timeout,omitempty"`
	// Enables autoupgrading of the magma package
	AutoupgradeEnabled bool `protobuf:"varint,4,opt,name=autoupgrade_enabled,json=autoupgradeEnabled,proto3" json:"autoupgrade_enabled,omitempty"`
	// Interval to poll for package upgrades
	AutoupgradePollInterval int32 `protobuf:"varint,5,opt,name=autoupgrade_poll_interval,json=autoupgradePollInterval,proto3" json:"autoupgrade_poll_interval,omitempty"`
	// The magma package version the gateway should upgrade to
	PackageVersion string `protobuf:"bytes,6,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	// List of upgrade images
	Images []*ImageSpec `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty"`
	// For streamer, should be left unused by gateway
	TierId       string          `protobuf:"bytes,8,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	FeatureFlags map[string]bool `protobuf:"bytes,9,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// List of dynamic_services
	DynamicServices []string `protobuf:"bytes,10,rep,name=dynamic_services,json=dynamicServices,proto3" json:"dynamic_services,omitempty"`
}

func (x *MagmaD) Reset() {
	*x = MagmaD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagmaD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagmaD) ProtoMessage() {}

func (x *MagmaD) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagmaD.ProtoReflect.Descriptor instead.
func (*MagmaD) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{4}
}

func (x *MagmaD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *MagmaD) GetCheckinInterval() int32 {
	if x != nil {
		return x.CheckinInterval
	}
	return 0
}

func (x *MagmaD) GetCheckinTimeout() int32 {
	if x != nil {
		return x.CheckinTimeout
	}
	return 0
}

func (x *MagmaD) GetAutoupgradeEnabled() bool {
	if x != nil {
		return x.AutoupgradeEnabled
	}
	return false
}

func (x *MagmaD) GetAutoupgradePollInterval() int32 {
	if x != nil {
		return x.AutoupgradePollInterval
	}
	return 0
}

func (x *MagmaD) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *MagmaD) GetImages() []*ImageSpec {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *MagmaD) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

func (x *MagmaD) GetFeatureFlags() map[string]bool {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *MagmaD) GetDynamicServices() []string {
	if x != nil {
		return x.DynamicServices
	}
	return nil
}

//------------------------------------------------------------------------------
// EventD configs
//------------------------------------------------------------------------------
type EventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
	// The verbosity level for events.
	// All events less than or equal to this verbosity will be logged.
	EventVerbosity int32 `protobuf:"varint,2,opt,name=event_verbosity,json=eventVerbosity,proto3" json:"event_verbosity,omitempty"`
}

func (x *EventD) Reset() {
	*x = EventD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventD) ProtoMessage() {}

func (x *EventD) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventD.ProtoReflect.Descriptor instead.
func (*EventD) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{5}
}

func (x *EventD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

func (x *EventD) GetEventVerbosity() int32 {
	if x != nil {
		return x.EventVerbosity
	}
	return 0
}

type DirectoryD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *DirectoryD) Reset() {
	*x = DirectoryD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryD) ProtoMessage() {}

func (x *DirectoryD) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryD.ProtoReflect.Descriptor instead.
func (*DirectoryD) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{6}
}

func (x *DirectoryD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// MetricsD configs
//------------------------------------------------------------------------------
type MetricsD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *MetricsD) Reset() {
	*x = MetricsD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsD) ProtoMessage() {}

func (x *MetricsD) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsD.ProtoReflect.Descriptor instead.
func (*MetricsD) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{7}
}

func (x *MetricsD) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// State configs
//------------------------------------------------------------------------------
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel protos.LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=magma.orc8r.LogLevel" json:"log_level,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{8}
}

func (x *State) GetLogLevel() protos.LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return protos.LogLevel_DEBUG
}

//------------------------------------------------------------------------------
// Fluent Bit configs
//------------------------------------------------------------------------------
type FluentBit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraTags        map[string]string `protobuf:"bytes,1,rep,name=extra_tags,json=extraTags,proto3" json:"extra_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ThrottleRate     uint32            `protobuf:"varint,10,opt,name=throttle_rate,json=throttleRate,proto3" json:"throttle_rate,omitempty"`
	ThrottleWindow   uint32            `protobuf:"varint,11,opt,name=throttle_window,json=throttleWindow,proto3" json:"throttle_window,omitempty"`
	ThrottleInterval string            `protobuf:"bytes,12,opt,name=throttle_interval,json=throttleInterval,proto3" json:"throttle_interval,omitempty"`
	FilesByTag       map[string]string `protobuf:"bytes,20,rep,name=files_by_tag,json=filesByTag,proto3" json:"files_by_tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FluentBit) Reset() {
	*x = FluentBit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mconfigs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluentBit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluentBit) ProtoMessage() {}

func (x *FluentBit) ProtoReflect() protoreflect.Message {
	mi := &file_mconfigs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluentBit.ProtoReflect.Descriptor instead.
func (*FluentBit) Descriptor() ([]byte, []int) {
	return file_mconfigs_proto_rawDescGZIP(), []int{9}
}

func (x *FluentBit) GetExtraTags() map[string]string {
	if x != nil {
		return x.ExtraTags
	}
	return nil
}

func (x *FluentBit) GetThrottleRate() uint32 {
	if x != nil {
		return x.ThrottleRate
	}
	return 0
}

func (x *FluentBit) GetThrottleWindow() uint32 {
	if x != nil {
		return x.ThrottleWindow
	}
	return 0
}

func (x *FluentBit) GetThrottleInterval() string {
	if x != nil {
		return x.ThrottleInterval
	}
	return ""
}

func (x *FluentBit) GetFilesByTag() map[string]string {
	if x != nil {
		return x.FilesByTag
	}
	return nil
}

var File_mconfigs_proto protoreflect.FileDescriptor

var file_mconfigs_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x32, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x44, 0x6e, 0x73, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x54,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x54,
	0x4c, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x68, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x68, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x61, 0x61, 0x61, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x61, 0x61, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x35, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xab, 0x04, 0x0a, 0x06, 0x4d, 0x61, 0x67, 0x6d,
	0x61, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75,
	0x74, 0x6f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61,
	0x75, 0x74, 0x6f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x67, 0x6d, 0x61, 0x44, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x22, 0x40, 0x0a, 0x0a,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3e,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x97, 0x03, 0x0a, 0x09,
	0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6c,
	0x75, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x6d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mconfigs_proto_rawDescOnce sync.Once
	file_mconfigs_proto_rawDescData = file_mconfigs_proto_rawDesc
)

func file_mconfigs_proto_rawDescGZIP() []byte {
	file_mconfigs_proto_rawDescOnce.Do(func() {
		file_mconfigs_proto_rawDescData = protoimpl.X.CompressGZIP(file_mconfigs_proto_rawDescData)
	})
	return file_mconfigs_proto_rawDescData
}

var file_mconfigs_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mconfigs_proto_goTypes = []interface{}{
	(*ControlProxy)(nil),                 // 0: magma.mconfig.ControlProxy
	(*DnsD)(nil),                         // 1: magma.mconfig.DnsD
	(*NetworkDNSConfigRecordsItems)(nil), // 2: magma.mconfig.NetworkDNSConfigRecordsItems
	(*ImageSpec)(nil),                    // 3: magma.mconfig.ImageSpec
	(*MagmaD)(nil),                       // 4: magma.mconfig.MagmaD
	(*EventD)(nil),                       // 5: magma.mconfig.EventD
	(*DirectoryD)(nil),                   // 6: magma.mconfig.DirectoryD
	(*MetricsD)(nil),                     // 7: magma.mconfig.MetricsD
	(*State)(nil),                        // 8: magma.mconfig.State
	(*FluentBit)(nil),                    // 9: magma.mconfig.FluentBit
	nil,                                  // 10: magma.mconfig.MagmaD.FeatureFlagsEntry
	nil,                                  // 11: magma.mconfig.FluentBit.ExtraTagsEntry
	nil,                                  // 12: magma.mconfig.FluentBit.FilesByTagEntry
	(protos.LogLevel)(0),                 // 13: magma.orc8r.LogLevel
}
var file_mconfigs_proto_depIdxs = []int32{
	13, // 0: magma.mconfig.ControlProxy.log_level:type_name -> magma.orc8r.LogLevel
	13, // 1: magma.mconfig.DnsD.log_level:type_name -> magma.orc8r.LogLevel
	2,  // 2: magma.mconfig.DnsD.records:type_name -> magma.mconfig.NetworkDNSConfigRecordsItems
	13, // 3: magma.mconfig.MagmaD.log_level:type_name -> magma.orc8r.LogLevel
	3,  // 4: magma.mconfig.MagmaD.images:type_name -> magma.mconfig.ImageSpec
	10, // 5: magma.mconfig.MagmaD.feature_flags:type_name -> magma.mconfig.MagmaD.FeatureFlagsEntry
	13, // 6: magma.mconfig.EventD.log_level:type_name -> magma.orc8r.LogLevel
	13, // 7: magma.mconfig.DirectoryD.log_level:type_name -> magma.orc8r.LogLevel
	13, // 8: magma.mconfig.MetricsD.log_level:type_name -> magma.orc8r.LogLevel
	13, // 9: magma.mconfig.State.log_level:type_name -> magma.orc8r.LogLevel
	11, // 10: magma.mconfig.FluentBit.extra_tags:type_name -> magma.mconfig.FluentBit.ExtraTagsEntry
	12, // 11: magma.mconfig.FluentBit.files_by_tag:type_name -> magma.mconfig.FluentBit.FilesByTagEntry
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mconfigs_proto_init() }
func file_mconfigs_proto_init() {
	if File_mconfigs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mconfigs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDNSConfigRecordsItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagmaD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mconfigs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluentBit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mconfigs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mconfigs_proto_goTypes,
		DependencyIndexes: file_mconfigs_proto_depIdxs,
		MessageInfos:      file_mconfigs_proto_msgTypes,
	}.Build()
	File_mconfigs_proto = out.File
	file_mconfigs_proto_rawDesc = nil
	file_mconfigs_proto_goTypes = nil
	file_mconfigs_proto_depIdxs = nil
}
