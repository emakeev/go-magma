//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: cellular_service.proto

package protos

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// (0)Turning off NonEPS service, (1)Both CSFB and SMS, (2)only SMS
type GatewayNonEPSConfig_NonEPSServiceControl int32

const (
	GatewayNonEPSConfig_NON_EPS_SERVICE_CONTROL_OFF      GatewayNonEPSConfig_NonEPSServiceControl = 0
	GatewayNonEPSConfig_NON_EPS_SERVICE_CONTROL_CSFB_SMS GatewayNonEPSConfig_NonEPSServiceControl = 1
	GatewayNonEPSConfig_NON_EPS_SERVICE_CONTROL_SMS      GatewayNonEPSConfig_NonEPSServiceControl = 2
)

// Enum value maps for GatewayNonEPSConfig_NonEPSServiceControl.
var (
	GatewayNonEPSConfig_NonEPSServiceControl_name = map[int32]string{
		0: "NON_EPS_SERVICE_CONTROL_OFF",
		1: "NON_EPS_SERVICE_CONTROL_CSFB_SMS",
		2: "NON_EPS_SERVICE_CONTROL_SMS",
	}
	GatewayNonEPSConfig_NonEPSServiceControl_value = map[string]int32{
		"NON_EPS_SERVICE_CONTROL_OFF":      0,
		"NON_EPS_SERVICE_CONTROL_CSFB_SMS": 1,
		"NON_EPS_SERVICE_CONTROL_SMS":      2,
	}
)

func (x GatewayNonEPSConfig_NonEPSServiceControl) Enum() *GatewayNonEPSConfig_NonEPSServiceControl {
	p := new(GatewayNonEPSConfig_NonEPSServiceControl)
	*p = x
	return p
}

func (x GatewayNonEPSConfig_NonEPSServiceControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayNonEPSConfig_NonEPSServiceControl) Descriptor() protoreflect.EnumDescriptor {
	return file_cellular_service_proto_enumTypes[0].Descriptor()
}

func (GatewayNonEPSConfig_NonEPSServiceControl) Type() protoreflect.EnumType {
	return &file_cellular_service_proto_enumTypes[0]
}

func (x GatewayNonEPSConfig_NonEPSServiceControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayNonEPSConfig_NonEPSServiceControl.Descriptor instead.
func (GatewayNonEPSConfig_NonEPSServiceControl) EnumDescriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{3, 0}
}

type GatewayNonEPSConfig_CSFBRat int32

const (
	GatewayNonEPSConfig_CSFBRAT_2G GatewayNonEPSConfig_CSFBRat = 0
	GatewayNonEPSConfig_CSFBRAT_3G GatewayNonEPSConfig_CSFBRat = 1
)

// Enum value maps for GatewayNonEPSConfig_CSFBRat.
var (
	GatewayNonEPSConfig_CSFBRat_name = map[int32]string{
		0: "CSFBRAT_2G",
		1: "CSFBRAT_3G",
	}
	GatewayNonEPSConfig_CSFBRat_value = map[string]int32{
		"CSFBRAT_2G": 0,
		"CSFBRAT_3G": 1,
	}
)

func (x GatewayNonEPSConfig_CSFBRat) Enum() *GatewayNonEPSConfig_CSFBRat {
	p := new(GatewayNonEPSConfig_CSFBRat)
	*p = x
	return p
}

func (x GatewayNonEPSConfig_CSFBRat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayNonEPSConfig_CSFBRat) Descriptor() protoreflect.EnumDescriptor {
	return file_cellular_service_proto_enumTypes[1].Descriptor()
}

func (GatewayNonEPSConfig_CSFBRat) Type() protoreflect.EnumType {
	return &file_cellular_service_proto_enumTypes[1]
}

func (x GatewayNonEPSConfig_CSFBRat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayNonEPSConfig_CSFBRat.Descriptor instead.
func (GatewayNonEPSConfig_CSFBRat) EnumDescriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{3, 1}
}

type NetworkEPCConfig_NetworkServices int32

const (
	// Deprecated: Do not use.
	NetworkEPCConfig_METERING    NetworkEPCConfig_NetworkServices = 0 // deprecated
	NetworkEPCConfig_DPI         NetworkEPCConfig_NetworkServices = 1
	NetworkEPCConfig_ENFORCEMENT NetworkEPCConfig_NetworkServices = 2
)

// Enum value maps for NetworkEPCConfig_NetworkServices.
var (
	NetworkEPCConfig_NetworkServices_name = map[int32]string{
		0: "METERING",
		1: "DPI",
		2: "ENFORCEMENT",
	}
	NetworkEPCConfig_NetworkServices_value = map[string]int32{
		"METERING":    0,
		"DPI":         1,
		"ENFORCEMENT": 2,
	}
)

func (x NetworkEPCConfig_NetworkServices) Enum() *NetworkEPCConfig_NetworkServices {
	p := new(NetworkEPCConfig_NetworkServices)
	*p = x
	return p
}

func (x NetworkEPCConfig_NetworkServices) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkEPCConfig_NetworkServices) Descriptor() protoreflect.EnumDescriptor {
	return file_cellular_service_proto_enumTypes[2].Descriptor()
}

func (NetworkEPCConfig_NetworkServices) Type() protoreflect.EnumType {
	return &file_cellular_service_proto_enumTypes[2]
}

func (x NetworkEPCConfig_NetworkServices) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkEPCConfig_NetworkServices.Descriptor instead.
func (NetworkEPCConfig_NetworkServices) EnumDescriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{6, 0}
}

type CellularGatewayConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ran                   *GatewayRANConfig    `protobuf:"bytes,1,opt,name=ran,proto3" json:"ran,omitempty"`
	Epc                   *GatewayEPCConfig    `protobuf:"bytes,2,opt,name=epc,proto3" json:"epc,omitempty"`
	NonEpsService         *GatewayNonEPSConfig `protobuf:"bytes,3,opt,name=non_eps_service,json=nonEpsService,proto3" json:"non_eps_service,omitempty"`
	AttachedEnodebSerials []string             `protobuf:"bytes,4,rep,name=attached_enodeb_serials,json=attachedEnodebSerials,proto3" json:"attached_enodeb_serials,omitempty"`
}

func (x *CellularGatewayConfig) Reset() {
	*x = CellularGatewayConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularGatewayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularGatewayConfig) ProtoMessage() {}

func (x *CellularGatewayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularGatewayConfig.ProtoReflect.Descriptor instead.
func (*CellularGatewayConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{0}
}

func (x *CellularGatewayConfig) GetRan() *GatewayRANConfig {
	if x != nil {
		return x.Ran
	}
	return nil
}

func (x *CellularGatewayConfig) GetEpc() *GatewayEPCConfig {
	if x != nil {
		return x.Epc
	}
	return nil
}

func (x *CellularGatewayConfig) GetNonEpsService() *GatewayNonEPSConfig {
	if x != nil {
		return x.NonEpsService
	}
	return nil
}

func (x *CellularGatewayConfig) GetAttachedEnodebSerials() []string {
	if x != nil {
		return x.AttachedEnodebSerials
	}
	return nil
}

type GatewayRANConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Physical cell ID (0-504)
	Pci int32 `protobuf:"varint,1,opt,name=pci,proto3" json:"pci,omitempty"`
	// Enable eNodeB
	TransmitEnabled bool `protobuf:"varint,2,opt,name=transmit_enabled,json=transmitEnabled,proto3" json:"transmit_enabled,omitempty"`
}

func (x *GatewayRANConfig) Reset() {
	*x = GatewayRANConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRANConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRANConfig) ProtoMessage() {}

func (x *GatewayRANConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRANConfig.ProtoReflect.Descriptor instead.
func (*GatewayRANConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayRANConfig) GetPci() int32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *GatewayRANConfig) GetTransmitEnabled() bool {
	if x != nil {
		return x.TransmitEnabled
	}
	return false
}

type GatewayEPCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatEnabled bool `protobuf:"varint,1,opt,name=nat_enabled,json=natEnabled,proto3" json:"nat_enabled,omitempty"`
	// IP block is only set if nat_enabled is false
	// An IP block is a range of IP addresses specified by a network address and
	// a prefix-length of the netmask. For example,
	//    IPv4 IP block:      "192.168.0.0/24"
	//    IPv6 IP block:      "2401:db00:1116:301b::/64"
	IpBlock string `protobuf:"bytes,2,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	// Primary DNS server
	DnsPrimary string `protobuf:"bytes,10,opt,name=dns_primary,json=dnsPrimary,proto3" json:"dns_primary,omitempty"`
	// Secondary DNS server
	DnsSecondary string `protobuf:"bytes,11,opt,name=dns_secondary,json=dnsSecondary,proto3" json:"dns_secondary,omitempty"`
}

func (x *GatewayEPCConfig) Reset() {
	*x = GatewayEPCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayEPCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayEPCConfig) ProtoMessage() {}

func (x *GatewayEPCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayEPCConfig.ProtoReflect.Descriptor instead.
func (*GatewayEPCConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayEPCConfig) GetNatEnabled() bool {
	if x != nil {
		return x.NatEnabled
	}
	return false
}

func (x *GatewayEPCConfig) GetIpBlock() string {
	if x != nil {
		return x.IpBlock
	}
	return ""
}

func (x *GatewayEPCConfig) GetDnsPrimary() string {
	if x != nil {
		return x.DnsPrimary
	}
	return ""
}

func (x *GatewayEPCConfig) GetDnsSecondary() string {
	if x != nil {
		return x.DnsSecondary
	}
	return ""
}

type GatewayNonEPSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mobile country code for CSFB
	CsfbMcc string `protobuf:"bytes,1,opt,name=csfb_mcc,json=csfbMcc,proto3" json:"csfb_mcc,omitempty"`
	// Mobile network code for CSFB
	CsfbMnc string `protobuf:"bytes,2,opt,name=csfb_mnc,json=csfbMnc,proto3" json:"csfb_mnc,omitempty"`
	// Location area code. 16-bit
	Lac int32 `protobuf:"varint,3,opt,name=lac,proto3" json:"lac,omitempty"`
	// RAT type (2G/3G), used by eNB
	CsfbRat GatewayNonEPSConfig_CSFBRat `protobuf:"varint,4,opt,name=csfb_rat,json=csfbRat,proto3,enum=magma.cellular.GatewayNonEPSConfig_CSFBRat" json:"csfb_rat,omitempty"`
	// 2G RAT frequencies /ARFCNs for redirection, used by eNB
	Arfcn_2G []int32 `protobuf:"varint,5,rep,packed,name=arfcn_2g,json=arfcn2g,proto3" json:"arfcn_2g,omitempty"`
	// For indicating one of the three modes
	NonEpsServiceControl GatewayNonEPSConfig_NonEPSServiceControl `protobuf:"varint,6,opt,name=non_eps_service_control,json=nonEpsServiceControl,proto3,enum=magma.cellular.GatewayNonEPSConfig_NonEPSServiceControl" json:"non_eps_service_control,omitempty"`
}

func (x *GatewayNonEPSConfig) Reset() {
	*x = GatewayNonEPSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayNonEPSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayNonEPSConfig) ProtoMessage() {}

func (x *GatewayNonEPSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayNonEPSConfig.ProtoReflect.Descriptor instead.
func (*GatewayNonEPSConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{3}
}

func (x *GatewayNonEPSConfig) GetCsfbMcc() string {
	if x != nil {
		return x.CsfbMcc
	}
	return ""
}

func (x *GatewayNonEPSConfig) GetCsfbMnc() string {
	if x != nil {
		return x.CsfbMnc
	}
	return ""
}

func (x *GatewayNonEPSConfig) GetLac() int32 {
	if x != nil {
		return x.Lac
	}
	return 0
}

func (x *GatewayNonEPSConfig) GetCsfbRat() GatewayNonEPSConfig_CSFBRat {
	if x != nil {
		return x.CsfbRat
	}
	return GatewayNonEPSConfig_CSFBRAT_2G
}

func (x *GatewayNonEPSConfig) GetArfcn_2G() []int32 {
	if x != nil {
		return x.Arfcn_2G
	}
	return nil
}

func (x *GatewayNonEPSConfig) GetNonEpsServiceControl() GatewayNonEPSConfig_NonEPSServiceControl {
	if x != nil {
		return x.NonEpsServiceControl
	}
	return GatewayNonEPSConfig_NON_EPS_SERVICE_CONTROL_OFF
}

type CellularNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ran          *NetworkRANConfig `protobuf:"bytes,1,opt,name=ran,proto3" json:"ran,omitempty"`
	Epc          *NetworkEPCConfig `protobuf:"bytes,2,opt,name=epc,proto3" json:"epc,omitempty"`
	FegNetworkId string            `protobuf:"bytes,3,opt,name=feg_network_id,json=fegNetworkId,proto3" json:"feg_network_id,omitempty"`
}

func (x *CellularNetworkConfig) Reset() {
	*x = CellularNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularNetworkConfig) ProtoMessage() {}

func (x *CellularNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularNetworkConfig.ProtoReflect.Descriptor instead.
func (*CellularNetworkConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{4}
}

func (x *CellularNetworkConfig) GetRan() *NetworkRANConfig {
	if x != nil {
		return x.Ran
	}
	return nil
}

func (x *CellularNetworkConfig) GetEpc() *NetworkEPCConfig {
	if x != nil {
		return x.Epc
	}
	return nil
}

func (x *CellularNetworkConfig) GetFegNetworkId() string {
	if x != nil {
		return x.FegNetworkId
	}
	return ""
}

type NetworkRANConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// Bandwidth in MHz, from set {1.4, 3, 5, 10, 15, 20}
	BandwidthMhz           int32                       `protobuf:"varint,2,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	SubframeAssignment     int32                       `protobuf:"varint,3,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	SpecialSubframePattern int32                       `protobuf:"varint,5,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	TddConfig              *NetworkRANConfig_TDDConfig `protobuf:"bytes,6,opt,name=tdd_config,json=tddConfig,proto3" json:"tdd_config,omitempty"`
	FddConfig              *NetworkRANConfig_FDDConfig `protobuf:"bytes,7,opt,name=fdd_config,json=fddConfig,proto3" json:"fdd_config,omitempty"`
}

func (x *NetworkRANConfig) Reset() {
	*x = NetworkRANConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRANConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRANConfig) ProtoMessage() {}

func (x *NetworkRANConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRANConfig.ProtoReflect.Descriptor instead.
func (*NetworkRANConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkRANConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *NetworkRANConfig) GetBandwidthMhz() int32 {
	if x != nil {
		return x.BandwidthMhz
	}
	return 0
}

func (x *NetworkRANConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *NetworkRANConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

func (x *NetworkRANConfig) GetTddConfig() *NetworkRANConfig_TDDConfig {
	if x != nil {
		return x.TddConfig
	}
	return nil
}

func (x *NetworkRANConfig) GetFddConfig() *NetworkRANConfig_FDDConfig {
	if x != nil {
		return x.FddConfig
	}
	return nil
}

type NetworkEPCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// always 3 digits
	// Mobile country code
	Mcc string `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// 2-3 digits
	// Mobile network code
	Mnc string `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// Tracking area code. 16-bit
	Tac int32 `protobuf:"varint,3,opt,name=tac,proto3" json:"tac,omitempty"`
	// Operator configuration field for LTE
	LteAuthOp []byte `protobuf:"bytes,4,opt,name=lte_auth_op,json=lteAuthOp,proto3" json:"lte_auth_op,omitempty"`
	// Authentication management field for LTE
	LteAuthAmf    []byte                                           `protobuf:"bytes,5,opt,name=lte_auth_amf,json=lteAuthAmf,proto3" json:"lte_auth_amf,omitempty"`
	SubProfiles   map[string]*NetworkEPCConfig_SubscriptionProfile `protobuf:"bytes,6,rep,name=sub_profiles,json=subProfiles,proto3" json:"sub_profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultRuleId string                                           `protobuf:"bytes,7,opt,name=default_rule_id,json=defaultRuleId,proto3" json:"default_rule_id,omitempty"`
	// Enable relaying S6a messages via FeG RPC
	RelayEnabled bool `protobuf:"varint,8,opt,name=relay_enabled,json=relayEnabled,proto3" json:"relay_enabled,omitempty"`
	// Ordered list of network service that will be enabled
	NetworkServices []NetworkEPCConfig_NetworkServices `protobuf:"varint,9,rep,packed,name=network_services,json=networkServices,proto3,enum=magma.cellular.NetworkEPCConfig_NetworkServices" json:"network_services,omitempty"`
	// If relay_enabled is false, this determines whether cloud subscriberdb
	// or local subscriberdb is used for authentication requests.
	CloudSubscriberdbEnabled bool `protobuf:"varint,10,opt,name=cloud_subscriberdb_enabled,json=cloudSubscriberdbEnabled,proto3" json:"cloud_subscriberdb_enabled,omitempty"`
}

func (x *NetworkEPCConfig) Reset() {
	*x = NetworkEPCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEPCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEPCConfig) ProtoMessage() {}

func (x *NetworkEPCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEPCConfig.ProtoReflect.Descriptor instead.
func (*NetworkEPCConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkEPCConfig) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *NetworkEPCConfig) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

func (x *NetworkEPCConfig) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *NetworkEPCConfig) GetLteAuthOp() []byte {
	if x != nil {
		return x.LteAuthOp
	}
	return nil
}

func (x *NetworkEPCConfig) GetLteAuthAmf() []byte {
	if x != nil {
		return x.LteAuthAmf
	}
	return nil
}

func (x *NetworkEPCConfig) GetSubProfiles() map[string]*NetworkEPCConfig_SubscriptionProfile {
	if x != nil {
		return x.SubProfiles
	}
	return nil
}

func (x *NetworkEPCConfig) GetDefaultRuleId() string {
	if x != nil {
		return x.DefaultRuleId
	}
	return ""
}

func (x *NetworkEPCConfig) GetRelayEnabled() bool {
	if x != nil {
		return x.RelayEnabled
	}
	return false
}

func (x *NetworkEPCConfig) GetNetworkServices() []NetworkEPCConfig_NetworkServices {
	if x != nil {
		return x.NetworkServices
	}
	return nil
}

func (x *NetworkEPCConfig) GetCloudSubscriberdbEnabled() bool {
	if x != nil {
		return x.CloudSubscriberdbEnabled
	}
	return false
}

type CellularEnodebConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EARFCN (0-65535)
	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// Subframe Assignment (0-6)
	SubframeAssignment int32 `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// Special Subframe Pattern (0-9)
	SpecialSubframePattern int32 `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
	// Physical cell ID (0-504)
	Pci int32 `protobuf:"varint,4,opt,name=pci,proto3" json:"pci,omitempty"`
	// Enable eNodeB
	TransmitEnabled bool `protobuf:"varint,5,opt,name=transmit_enabled,json=transmitEnabled,proto3" json:"transmit_enabled,omitempty"`
	// eNodeB device class - limited support
	DeviceClass string `protobuf:"bytes,6,opt,name=device_class,json=deviceClass,proto3" json:"device_class,omitempty"`
	// Cellular ID needs to be set to avoid collision
	CellId int32 `protobuf:"varint,7,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	// Bandwidth in MHz
	BandwidthMhz int32 `protobuf:"varint,8,opt,name=bandwidth_mhz,json=bandwidthMhz,proto3" json:"bandwidth_mhz,omitempty"`
	// Cellular tracking area code
	Tac int32 `protobuf:"varint,9,opt,name=tac,proto3" json:"tac,omitempty"`
}

func (x *CellularEnodebConfig) Reset() {
	*x = CellularEnodebConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellularEnodebConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellularEnodebConfig) ProtoMessage() {}

func (x *CellularEnodebConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellularEnodebConfig.ProtoReflect.Descriptor instead.
func (*CellularEnodebConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{7}
}

func (x *CellularEnodebConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *CellularEnodebConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *CellularEnodebConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

func (x *CellularEnodebConfig) GetPci() int32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *CellularEnodebConfig) GetTransmitEnabled() bool {
	if x != nil {
		return x.TransmitEnabled
	}
	return false
}

func (x *CellularEnodebConfig) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *CellularEnodebConfig) GetCellId() int32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *CellularEnodebConfig) GetBandwidthMhz() int32 {
	if x != nil {
		return x.BandwidthMhz
	}
	return 0
}

func (x *CellularEnodebConfig) GetTac() int32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

type NetworkRANConfig_FDDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	Earfcnul int32 `protobuf:"varint,2,opt,name=earfcnul,proto3" json:"earfcnul,omitempty"`
}

func (x *NetworkRANConfig_FDDConfig) Reset() {
	*x = NetworkRANConfig_FDDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRANConfig_FDDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRANConfig_FDDConfig) ProtoMessage() {}

func (x *NetworkRANConfig_FDDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRANConfig_FDDConfig.ProtoReflect.Descriptor instead.
func (*NetworkRANConfig_FDDConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *NetworkRANConfig_FDDConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *NetworkRANConfig_FDDConfig) GetEarfcnul() int32 {
	if x != nil {
		return x.Earfcnul
	}
	return 0
}

type NetworkRANConfig_TDDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earfcndl int32 `protobuf:"varint,1,opt,name=earfcndl,proto3" json:"earfcndl,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SubframeAssignment int32 `protobuf:"varint,2,opt,name=subframe_assignment,json=subframeAssignment,proto3" json:"subframe_assignment,omitempty"`
	// TDD subframe config parameter. See http://niviuk.free.fr/lte_tdd.php
	SpecialSubframePattern int32 `protobuf:"varint,3,opt,name=special_subframe_pattern,json=specialSubframePattern,proto3" json:"special_subframe_pattern,omitempty"`
}

func (x *NetworkRANConfig_TDDConfig) Reset() {
	*x = NetworkRANConfig_TDDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkRANConfig_TDDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkRANConfig_TDDConfig) ProtoMessage() {}

func (x *NetworkRANConfig_TDDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkRANConfig_TDDConfig.ProtoReflect.Descriptor instead.
func (*NetworkRANConfig_TDDConfig) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{5, 1}
}

func (x *NetworkRANConfig_TDDConfig) GetEarfcndl() int32 {
	if x != nil {
		return x.Earfcndl
	}
	return 0
}

func (x *NetworkRANConfig_TDDConfig) GetSubframeAssignment() int32 {
	if x != nil {
		return x.SubframeAssignment
	}
	return 0
}

func (x *NetworkRANConfig_TDDConfig) GetSpecialSubframePattern() int32 {
	if x != nil {
		return x.SpecialSubframePattern
	}
	return 0
}

type NetworkEPCConfig_SubscriptionProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum uplink bit rate (AMBR-UL)
	MaxUlBitRate uint64 `protobuf:"varint,1,opt,name=max_ul_bit_rate,json=maxUlBitRate,proto3" json:"max_ul_bit_rate,omitempty"`
	// Maximum downlink bit rate (AMBR-DL)
	MaxDlBitRate uint64 `protobuf:"varint,2,opt,name=max_dl_bit_rate,json=maxDlBitRate,proto3" json:"max_dl_bit_rate,omitempty"`
}

func (x *NetworkEPCConfig_SubscriptionProfile) Reset() {
	*x = NetworkEPCConfig_SubscriptionProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellular_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEPCConfig_SubscriptionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEPCConfig_SubscriptionProfile) ProtoMessage() {}

func (x *NetworkEPCConfig_SubscriptionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cellular_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEPCConfig_SubscriptionProfile.ProtoReflect.Descriptor instead.
func (*NetworkEPCConfig_SubscriptionProfile) Descriptor() ([]byte, []int) {
	return file_cellular_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *NetworkEPCConfig_SubscriptionProfile) GetMaxUlBitRate() uint64 {
	if x != nil {
		return x.MaxUlBitRate
	}
	return 0
}

func (x *NetworkEPCConfig_SubscriptionProfile) GetMaxDlBitRate() uint64 {
	if x != nil {
		return x.MaxDlBitRate
	}
	return 0
}

var File_cellular_service_proto protoreflect.FileDescriptor

var file_cellular_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x43, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x41, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x72, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x50, 0x43, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x4b, 0x0a, 0x0f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x65, 0x70, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x6f, 0x6e, 0x45,
	0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x45, 0x70, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22,
	0x4f, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x41, 0x4e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x50, 0x43, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x22, 0xdc, 0x03, 0x0a, 0x13, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4e, 0x6f, 0x6e, 0x45, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x73, 0x66, 0x62, 0x5f, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x73, 0x66, 0x62, 0x4d, 0x63, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73,
	0x66, 0x62, 0x5f, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73,
	0x66, 0x62, 0x4d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6c, 0x61, 0x63, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x73, 0x66, 0x62, 0x5f,
	0x72, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x4e, 0x6f, 0x6e, 0x45, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x53, 0x46, 0x42, 0x52, 0x61, 0x74, 0x52, 0x07, 0x63, 0x73, 0x66, 0x62, 0x52, 0x61, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x5f, 0x32, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x32, 0x67, 0x12, 0x6f, 0x0a, 0x17, 0x6e, 0x6f,
	0x6e, 0x5f, 0x65, 0x70, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4e, 0x6f, 0x6e, 0x45, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4e, 0x6f, 0x6e, 0x45, 0x50, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x45, 0x70, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x7e, 0x0a, 0x14, 0x4e,
	0x6f, 0x6e, 0x45, 0x50, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x43, 0x53, 0x46, 0x42, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f,
	0x4e, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x22, 0x29, 0x0a, 0x07, 0x43,
	0x53, 0x46, 0x42, 0x52, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x46, 0x42, 0x52, 0x41,
	0x54, 0x5f, 0x32, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x46, 0x42, 0x52, 0x41,
	0x54, 0x5f, 0x33, 0x47, 0x10, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x03, 0x72, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x41, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x72, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x50, 0x43, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x67, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x65, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xae,
	0x04, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x41, 0x4e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x68, 0x7a,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x4d, 0x68, 0x7a, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x49, 0x0a, 0x0a, 0x74, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x41, 0x4e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x74, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x64,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x41, 0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x66, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x43, 0x0a, 0x09, 0x46, 0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x75, 0x6c, 0x1a, 0x92, 0x01, 0x0a, 0x09, 0x54,
	0x44, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x61, 0x72, 0x66,
	0x63, 0x6e, 0x64, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22,
	0xe2, 0x05, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x50, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x74,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x74,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x6d, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6c, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6d, 0x66, 0x12, 0x54, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x50, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x5b, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x64, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x64, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x63, 0x0a, 0x13, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x55,
	0x6c, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x6c, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x1a,
	0x74, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x50, 0x43,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x50,
	0x49, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x22, 0xcd, 0x02, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x64, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d,
	0x68, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x61, 0x63, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellular_service_proto_rawDescOnce sync.Once
	file_cellular_service_proto_rawDescData = file_cellular_service_proto_rawDesc
)

func file_cellular_service_proto_rawDescGZIP() []byte {
	file_cellular_service_proto_rawDescOnce.Do(func() {
		file_cellular_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellular_service_proto_rawDescData)
	})
	return file_cellular_service_proto_rawDescData
}

var file_cellular_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cellular_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cellular_service_proto_goTypes = []interface{}{
	(GatewayNonEPSConfig_NonEPSServiceControl)(0), // 0: magma.cellular.GatewayNonEPSConfig.NonEPSServiceControl
	(GatewayNonEPSConfig_CSFBRat)(0),              // 1: magma.cellular.GatewayNonEPSConfig.CSFBRat
	(NetworkEPCConfig_NetworkServices)(0),         // 2: magma.cellular.NetworkEPCConfig.NetworkServices
	(*CellularGatewayConfig)(nil),                 // 3: magma.cellular.CellularGatewayConfig
	(*GatewayRANConfig)(nil),                      // 4: magma.cellular.GatewayRANConfig
	(*GatewayEPCConfig)(nil),                      // 5: magma.cellular.GatewayEPCConfig
	(*GatewayNonEPSConfig)(nil),                   // 6: magma.cellular.GatewayNonEPSConfig
	(*CellularNetworkConfig)(nil),                 // 7: magma.cellular.CellularNetworkConfig
	(*NetworkRANConfig)(nil),                      // 8: magma.cellular.NetworkRANConfig
	(*NetworkEPCConfig)(nil),                      // 9: magma.cellular.NetworkEPCConfig
	(*CellularEnodebConfig)(nil),                  // 10: magma.cellular.CellularEnodebConfig
	(*NetworkRANConfig_FDDConfig)(nil),            // 11: magma.cellular.NetworkRANConfig.FDDConfig
	(*NetworkRANConfig_TDDConfig)(nil),            // 12: magma.cellular.NetworkRANConfig.TDDConfig
	(*NetworkEPCConfig_SubscriptionProfile)(nil),  // 13: magma.cellular.NetworkEPCConfig.SubscriptionProfile
	nil, // 14: magma.cellular.NetworkEPCConfig.SubProfilesEntry
}
var file_cellular_service_proto_depIdxs = []int32{
	4,  // 0: magma.cellular.CellularGatewayConfig.ran:type_name -> magma.cellular.GatewayRANConfig
	5,  // 1: magma.cellular.CellularGatewayConfig.epc:type_name -> magma.cellular.GatewayEPCConfig
	6,  // 2: magma.cellular.CellularGatewayConfig.non_eps_service:type_name -> magma.cellular.GatewayNonEPSConfig
	1,  // 3: magma.cellular.GatewayNonEPSConfig.csfb_rat:type_name -> magma.cellular.GatewayNonEPSConfig.CSFBRat
	0,  // 4: magma.cellular.GatewayNonEPSConfig.non_eps_service_control:type_name -> magma.cellular.GatewayNonEPSConfig.NonEPSServiceControl
	8,  // 5: magma.cellular.CellularNetworkConfig.ran:type_name -> magma.cellular.NetworkRANConfig
	9,  // 6: magma.cellular.CellularNetworkConfig.epc:type_name -> magma.cellular.NetworkEPCConfig
	12, // 7: magma.cellular.NetworkRANConfig.tdd_config:type_name -> magma.cellular.NetworkRANConfig.TDDConfig
	11, // 8: magma.cellular.NetworkRANConfig.fdd_config:type_name -> magma.cellular.NetworkRANConfig.FDDConfig
	14, // 9: magma.cellular.NetworkEPCConfig.sub_profiles:type_name -> magma.cellular.NetworkEPCConfig.SubProfilesEntry
	2,  // 10: magma.cellular.NetworkEPCConfig.network_services:type_name -> magma.cellular.NetworkEPCConfig.NetworkServices
	13, // 11: magma.cellular.NetworkEPCConfig.SubProfilesEntry.value:type_name -> magma.cellular.NetworkEPCConfig.SubscriptionProfile
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cellular_service_proto_init() }
func file_cellular_service_proto_init() {
	if File_cellular_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cellular_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellularGatewayConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRANConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayEPCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayNonEPSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellularNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRANConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEPCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellularEnodebConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRANConfig_FDDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkRANConfig_TDDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellular_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEPCConfig_SubscriptionProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellular_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellular_service_proto_goTypes,
		DependencyIndexes: file_cellular_service_proto_depIdxs,
		EnumInfos:         file_cellular_service_proto_enumTypes,
		MessageInfos:      file_cellular_service_proto_msgTypes,
	}.Build()
	File_cellular_service_proto = out.File
	file_cellular_service_proto_rawDesc = nil
	file_cellular_service_proto_goTypes = nil
	file_cellular_service_proto_depIdxs = nil
}
