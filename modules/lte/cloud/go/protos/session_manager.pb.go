//
//Copyright 2020 The Magma Authors.
//
//This source code is licensed under the BSD-style license found in the
//LICENSE file in the root directory of this source tree.
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: session_manager.proto

package protos

import (
	context "context"
	protos "github.com/go-magma/magma/lib/go/protos"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

///////////////////
// LocalSessionManager service
///////////////////
type RATType int32

const (
	RATType_TGPP_LTE  RATType = 0 // will map to 06 (EUTRAN, 3GPP TS 29.274) for Gy, 1004 (EUTRAN, 3GPP TS 29.212) S6a, Gx
	RATType_TGPP_WLAN RATType = 1 // will map to 03 (WLAN, 3GPP TS 29.274) for Gy, 0 (WLAN, 3GPP TS 29.212) S6a, Gx
)

// Enum value maps for RATType.
var (
	RATType_name = map[int32]string{
		0: "TGPP_LTE",
		1: "TGPP_WLAN",
	}
	RATType_value = map[string]int32{
		"TGPP_LTE":  0,
		"TGPP_WLAN": 1,
	}
)

func (x RATType) Enum() *RATType {
	p := new(RATType)
	*p = x
	return p
}

func (x RATType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RATType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[0].Descriptor()
}

func (RATType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[0]
}

func (x RATType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RATType.Descriptor instead.
func (RATType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0}
}

type EventTrigger int32

const (
	EventTrigger_SGSN_CHANGE        EventTrigger = 0
	EventTrigger_QOS_CHANGE         EventTrigger = 1
	EventTrigger_RAT_CHANGE         EventTrigger = 2
	EventTrigger_TFT_CHANGE         EventTrigger = 3
	EventTrigger_PLMN_CHANGE        EventTrigger = 4
	EventTrigger_LOSS_OF_BEARER     EventTrigger = 5
	EventTrigger_RECOVERY_OF_BEARER EventTrigger = 6
	EventTrigger_IP_CAN_CHANGE      EventTrigger = 7
	// 8, 9, 10 are unused
	EventTrigger_QOS_CHANGE_EXCEEDING_AUTHORIZATION EventTrigger = 11
	EventTrigger_RAI_CHANGE                         EventTrigger = 12
	EventTrigger_USER_LOCATION_CHANGE               EventTrigger = 13
	EventTrigger_NO_EVENT_TRIGGERS                  EventTrigger = 14
	EventTrigger_OUT_OF_CREDIT                      EventTrigger = 15
	EventTrigger_REALLOCATION_OF_CREDIT             EventTrigger = 16
	EventTrigger_REVALIDATION_TIMEOUT               EventTrigger = 17
	EventTrigger_UE_IP_ADDRESS_ALLOCATE             EventTrigger = 18
	EventTrigger_UE_IP_ADDRESS_RELEASE              EventTrigger = 19
	EventTrigger_DEFAULT_EPS_BEARER_QOS_CHANGE      EventTrigger = 20
	EventTrigger_AN_GW_CHANGE                       EventTrigger = 21
	EventTrigger_SUCCESSFUL_RESOURCE_ALLOCATION     EventTrigger = 22
	EventTrigger_RESOURCE_MODIFICATION_REQUEST      EventTrigger = 23
	EventTrigger_PGW_TRACE_CONTROL                  EventTrigger = 24
	EventTrigger_UE_TIME_ZONE_CHANGE                EventTrigger = 25
	EventTrigger_TAI_CHANGE                         EventTrigger = 26
	EventTrigger_ECGI_CHANGE                        EventTrigger = 27
	EventTrigger_CHARGING_CORRELATION_EXCHANGE      EventTrigger = 28
	EventTrigger_APN_AMBR_MODIFICATION_FAILURE      EventTrigger = 29
	EventTrigger_USER_CSG_INFORMATION_CHANGE        EventTrigger = 30
	// 31, 32 are unused
	EventTrigger_USAGE_REPORT                                    EventTrigger = 33
	EventTrigger_DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE     EventTrigger = 34
	EventTrigger_USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE   EventTrigger = 35
	EventTrigger_USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE EventTrigger = 36
	EventTrigger_ROUTING_RULE_CHANGE                             EventTrigger = 37
	// 38 is unused
	EventTrigger_APPLICATION_START EventTrigger = 39
	EventTrigger_APPLICATION_STOP  EventTrigger = 40
	// 41 is unused
	EventTrigger_CS_TO_PS_HANDOVER                                       EventTrigger = 42
	EventTrigger_UE_LOCAL_IP_ADDRESS_CHANGE                              EventTrigger = 43
	EventTrigger_HENB_LOCAL_IP_ADDRESS_CHANGE                            EventTrigger = 44
	EventTrigger_ACCESS_NETWORK_INFO_REPORT                              EventTrigger = 45
	EventTrigger_CREDIT_MANAGEMENT_SESSION_FAILURE                       EventTrigger = 46
	EventTrigger_DEFAULT_QOS_CHANGE                                      EventTrigger = 47
	EventTrigger_CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT EventTrigger = 48
	// UNSUPPORTED is not defined in 3GPP
	EventTrigger_UNSUPPORTED EventTrigger = 49
)

// Enum value maps for EventTrigger.
var (
	EventTrigger_name = map[int32]string{
		0:  "SGSN_CHANGE",
		1:  "QOS_CHANGE",
		2:  "RAT_CHANGE",
		3:  "TFT_CHANGE",
		4:  "PLMN_CHANGE",
		5:  "LOSS_OF_BEARER",
		6:  "RECOVERY_OF_BEARER",
		7:  "IP_CAN_CHANGE",
		11: "QOS_CHANGE_EXCEEDING_AUTHORIZATION",
		12: "RAI_CHANGE",
		13: "USER_LOCATION_CHANGE",
		14: "NO_EVENT_TRIGGERS",
		15: "OUT_OF_CREDIT",
		16: "REALLOCATION_OF_CREDIT",
		17: "REVALIDATION_TIMEOUT",
		18: "UE_IP_ADDRESS_ALLOCATE",
		19: "UE_IP_ADDRESS_RELEASE",
		20: "DEFAULT_EPS_BEARER_QOS_CHANGE",
		21: "AN_GW_CHANGE",
		22: "SUCCESSFUL_RESOURCE_ALLOCATION",
		23: "RESOURCE_MODIFICATION_REQUEST",
		24: "PGW_TRACE_CONTROL",
		25: "UE_TIME_ZONE_CHANGE",
		26: "TAI_CHANGE",
		27: "ECGI_CHANGE",
		28: "CHARGING_CORRELATION_EXCHANGE",
		29: "APN_AMBR_MODIFICATION_FAILURE",
		30: "USER_CSG_INFORMATION_CHANGE",
		33: "USAGE_REPORT",
		34: "DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE",
		35: "USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE",
		36: "USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE",
		37: "ROUTING_RULE_CHANGE",
		39: "APPLICATION_START",
		40: "APPLICATION_STOP",
		42: "CS_TO_PS_HANDOVER",
		43: "UE_LOCAL_IP_ADDRESS_CHANGE",
		44: "HENB_LOCAL_IP_ADDRESS_CHANGE",
		45: "ACCESS_NETWORK_INFO_REPORT",
		46: "CREDIT_MANAGEMENT_SESSION_FAILURE",
		47: "DEFAULT_QOS_CHANGE",
		48: "CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT",
		49: "UNSUPPORTED",
	}
	EventTrigger_value = map[string]int32{
		"SGSN_CHANGE":                                     0,
		"QOS_CHANGE":                                      1,
		"RAT_CHANGE":                                      2,
		"TFT_CHANGE":                                      3,
		"PLMN_CHANGE":                                     4,
		"LOSS_OF_BEARER":                                  5,
		"RECOVERY_OF_BEARER":                              6,
		"IP_CAN_CHANGE":                                   7,
		"QOS_CHANGE_EXCEEDING_AUTHORIZATION":              11,
		"RAI_CHANGE":                                      12,
		"USER_LOCATION_CHANGE":                            13,
		"NO_EVENT_TRIGGERS":                               14,
		"OUT_OF_CREDIT":                                   15,
		"REALLOCATION_OF_CREDIT":                          16,
		"REVALIDATION_TIMEOUT":                            17,
		"UE_IP_ADDRESS_ALLOCATE":                          18,
		"UE_IP_ADDRESS_RELEASE":                           19,
		"DEFAULT_EPS_BEARER_QOS_CHANGE":                   20,
		"AN_GW_CHANGE":                                    21,
		"SUCCESSFUL_RESOURCE_ALLOCATION":                  22,
		"RESOURCE_MODIFICATION_REQUEST":                   23,
		"PGW_TRACE_CONTROL":                               24,
		"UE_TIME_ZONE_CHANGE":                             25,
		"TAI_CHANGE":                                      26,
		"ECGI_CHANGE":                                     27,
		"CHARGING_CORRELATION_EXCHANGE":                   28,
		"APN_AMBR_MODIFICATION_FAILURE":                   29,
		"USER_CSG_INFORMATION_CHANGE":                     30,
		"USAGE_REPORT":                                    33,
		"DEFAULT_EPS_BEARER_QOS_MODIFICATION_FAILURE":     34,
		"USER_CSG_HYBRID_SUBSCRIBED_INFORMATION_CHANGE":   35,
		"USER_CSG_HYBRID_UNSUBSCRIBED_INFORMATION_CHANGE": 36,
		"ROUTING_RULE_CHANGE":                             37,
		"APPLICATION_START":                               39,
		"APPLICATION_STOP":                                40,
		"CS_TO_PS_HANDOVER":                               42,
		"UE_LOCAL_IP_ADDRESS_CHANGE":                      43,
		"HENB_LOCAL_IP_ADDRESS_CHANGE":                    44,
		"ACCESS_NETWORK_INFO_REPORT":                      45,
		"CREDIT_MANAGEMENT_SESSION_FAILURE":               46,
		"DEFAULT_QOS_CHANGE":                              47,
		"CHANGE_OF_UE_PRESENCE_IN_PRESENCE_REPORTING_AREA_REPORT": 48,
		"UNSUPPORTED": 49,
	}
)

func (x EventTrigger) Enum() *EventTrigger {
	p := new(EventTrigger)
	*p = x
	return p
}

func (x EventTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[1].Descriptor()
}

func (EventTrigger) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[1]
}

func (x EventTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTrigger.Descriptor instead.
func (EventTrigger) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{1}
}

type QCI int32

const (
	QCI_QCI_0  QCI = 0
	QCI_QCI_1  QCI = 1
	QCI_QCI_2  QCI = 2
	QCI_QCI_3  QCI = 3
	QCI_QCI_4  QCI = 4
	QCI_QCI_5  QCI = 5
	QCI_QCI_6  QCI = 6
	QCI_QCI_7  QCI = 7
	QCI_QCI_8  QCI = 8
	QCI_QCI_9  QCI = 9
	QCI_QCI_65 QCI = 65
	QCI_QCI_66 QCI = 66
	QCI_QCI_67 QCI = 67
	QCI_QCI_70 QCI = 70
	QCI_QCI_75 QCI = 75
	QCI_QCI_79 QCI = 79
)

// Enum value maps for QCI.
var (
	QCI_name = map[int32]string{
		0:  "QCI_0",
		1:  "QCI_1",
		2:  "QCI_2",
		3:  "QCI_3",
		4:  "QCI_4",
		5:  "QCI_5",
		6:  "QCI_6",
		7:  "QCI_7",
		8:  "QCI_8",
		9:  "QCI_9",
		65: "QCI_65",
		66: "QCI_66",
		67: "QCI_67",
		70: "QCI_70",
		75: "QCI_75",
		79: "QCI_79",
	}
	QCI_value = map[string]int32{
		"QCI_0":  0,
		"QCI_1":  1,
		"QCI_2":  2,
		"QCI_3":  3,
		"QCI_4":  4,
		"QCI_5":  5,
		"QCI_6":  6,
		"QCI_7":  7,
		"QCI_8":  8,
		"QCI_9":  9,
		"QCI_65": 65,
		"QCI_66": 66,
		"QCI_67": 67,
		"QCI_70": 70,
		"QCI_75": 75,
		"QCI_79": 79,
	}
)

func (x QCI) Enum() *QCI {
	p := new(QCI)
	*p = x
	return p
}

func (x QCI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QCI) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[2].Descriptor()
}

func (QCI) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[2]
}

func (x QCI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QCI.Descriptor instead.
func (QCI) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{2}
}

type ReAuthResult int32

const (
	ReAuthResult_UPDATE_INITIATED  ReAuthResult = 0
	ReAuthResult_UPDATE_NOT_NEEDED ReAuthResult = 1
	ReAuthResult_SESSION_NOT_FOUND ReAuthResult = 2
	ReAuthResult_OTHER_FAILURE     ReAuthResult = 3
)

// Enum value maps for ReAuthResult.
var (
	ReAuthResult_name = map[int32]string{
		0: "UPDATE_INITIATED",
		1: "UPDATE_NOT_NEEDED",
		2: "SESSION_NOT_FOUND",
		3: "OTHER_FAILURE",
	}
	ReAuthResult_value = map[string]int32{
		"UPDATE_INITIATED":  0,
		"UPDATE_NOT_NEEDED": 1,
		"SESSION_NOT_FOUND": 2,
		"OTHER_FAILURE":     3,
	}
)

func (x ReAuthResult) Enum() *ReAuthResult {
	p := new(ReAuthResult)
	*p = x
	return p
}

func (x ReAuthResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReAuthResult) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[3].Descriptor()
}

func (ReAuthResult) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[3]
}

func (x ReAuthResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReAuthResult.Descriptor instead.
func (ReAuthResult) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{3}
}

type CreditLimitType int32

const (
	CreditLimitType_FINITE             CreditLimitType = 0
	CreditLimitType_INFINITE_UNMETERED CreditLimitType = 1
	CreditLimitType_INFINITE_METERED   CreditLimitType = 2
)

// Enum value maps for CreditLimitType.
var (
	CreditLimitType_name = map[int32]string{
		0: "FINITE",
		1: "INFINITE_UNMETERED",
		2: "INFINITE_METERED",
	}
	CreditLimitType_value = map[string]int32{
		"FINITE":             0,
		"INFINITE_UNMETERED": 1,
		"INFINITE_METERED":   2,
	}
)

func (x CreditLimitType) Enum() *CreditLimitType {
	p := new(CreditLimitType)
	*p = x
	return p
}

func (x CreditLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[4].Descriptor()
}

func (CreditLimitType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[4]
}

func (x CreditLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditLimitType.Descriptor instead.
func (CreditLimitType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4}
}

type MonitoringLevel int32

const (
	MonitoringLevel_SESSION_LEVEL  MonitoringLevel = 0
	MonitoringLevel_PCC_RULE_LEVEL MonitoringLevel = 1
)

// Enum value maps for MonitoringLevel.
var (
	MonitoringLevel_name = map[int32]string{
		0: "SESSION_LEVEL",
		1: "PCC_RULE_LEVEL",
	}
	MonitoringLevel_value = map[string]int32{
		"SESSION_LEVEL":  0,
		"PCC_RULE_LEVEL": 1,
	}
)

func (x MonitoringLevel) Enum() *MonitoringLevel {
	p := new(MonitoringLevel)
	*p = x
	return p
}

func (x MonitoringLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitoringLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[5].Descriptor()
}

func (MonitoringLevel) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[5]
}

func (x MonitoringLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitoringLevel.Descriptor instead.
func (MonitoringLevel) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{5}
}

type ChargingReAuthRequest_Type int32

const (
	ChargingReAuthRequest_SINGLE_SERVICE ChargingReAuthRequest_Type = 0
	ChargingReAuthRequest_ENTIRE_SESSION ChargingReAuthRequest_Type = 1
)

// Enum value maps for ChargingReAuthRequest_Type.
var (
	ChargingReAuthRequest_Type_name = map[int32]string{
		0: "SINGLE_SERVICE",
		1: "ENTIRE_SESSION",
	}
	ChargingReAuthRequest_Type_value = map[string]int32{
		"SINGLE_SERVICE": 0,
		"ENTIRE_SESSION": 1,
	}
)

func (x ChargingReAuthRequest_Type) Enum() *ChargingReAuthRequest_Type {
	p := new(ChargingReAuthRequest_Type)
	*p = x
	return p
}

func (x ChargingReAuthRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingReAuthRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[6].Descriptor()
}

func (ChargingReAuthRequest_Type) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[6]
}

func (x ChargingReAuthRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingReAuthRequest_Type.Descriptor instead.
func (ChargingReAuthRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{10, 0}
}

type PolicyReAuthAnswer_FailureCode int32

const (
	// We want to map these directly to the diameter return codes, so use a
	// placeholder for 0
	PolicyReAuthAnswer_UNUSED                             PolicyReAuthAnswer_FailureCode = 0
	PolicyReAuthAnswer_UNKNOWN_RULE_NAME                  PolicyReAuthAnswer_FailureCode = 1
	PolicyReAuthAnswer_RATING_GROUP_ERROR                 PolicyReAuthAnswer_FailureCode = 2
	PolicyReAuthAnswer_SERVICE_IDENTIFIER_ERROR           PolicyReAuthAnswer_FailureCode = 3
	PolicyReAuthAnswer_GW_PCEF_MALFUNCTION                PolicyReAuthAnswer_FailureCode = 4
	PolicyReAuthAnswer_RESOURCES_LIMITATION               PolicyReAuthAnswer_FailureCode = 5
	PolicyReAuthAnswer_MAX_NR_BEARERS_REACHED             PolicyReAuthAnswer_FailureCode = 6
	PolicyReAuthAnswer_UNKNOWN_BEARER_ID                  PolicyReAuthAnswer_FailureCode = 7
	PolicyReAuthAnswer_MISSING_BEARER_ID                  PolicyReAuthAnswer_FailureCode = 8
	PolicyReAuthAnswer_MISSING_FLOW_INFORMATION           PolicyReAuthAnswer_FailureCode = 9
	PolicyReAuthAnswer_RESOURCE_ALLOCATION_FAILURE        PolicyReAuthAnswer_FailureCode = 10
	PolicyReAuthAnswer_UNSUCCESSFUL_QOS_VALIDATION        PolicyReAuthAnswer_FailureCode = 11
	PolicyReAuthAnswer_INCORRECT_FLOW_INFORMATION         PolicyReAuthAnswer_FailureCode = 12
	PolicyReAuthAnswer_PS_TO_CS_HANDOVER                  PolicyReAuthAnswer_FailureCode = 13
	PolicyReAuthAnswer_TDF_APPLICATION_IDENTIFIER_ERROR   PolicyReAuthAnswer_FailureCode = 14
	PolicyReAuthAnswer_NO_BEARER_FOUND                    PolicyReAuthAnswer_FailureCode = 15
	PolicyReAuthAnswer_FILTER_RESTRICTIONS                PolicyReAuthAnswer_FailureCode = 16
	PolicyReAuthAnswer_AN_GW_FAILED                       PolicyReAuthAnswer_FailureCode = 17
	PolicyReAuthAnswer_MISSING_REDIRECT_SERVER_ADDRESS    PolicyReAuthAnswer_FailureCode = 18
	PolicyReAuthAnswer_CM_END_USER_SERVICE_DENIED         PolicyReAuthAnswer_FailureCode = 19
	PolicyReAuthAnswer_CM_CREDIT_CONTROL_NOT_APPLICABLE   PolicyReAuthAnswer_FailureCode = 20
	PolicyReAuthAnswer_CM_AUTHORIZATION_REJECTED          PolicyReAuthAnswer_FailureCode = 21
	PolicyReAuthAnswer_CM_USER_UNKNOWN                    PolicyReAuthAnswer_FailureCode = 22
	PolicyReAuthAnswer_CM_RATING_FAILED                   PolicyReAuthAnswer_FailureCode = 23
	PolicyReAuthAnswer_ROUTING_RULE_REJECTION             PolicyReAuthAnswer_FailureCode = 24
	PolicyReAuthAnswer_UNKNOWN_ROUTING_ACCESS_INFORMATION PolicyReAuthAnswer_FailureCode = 25
	PolicyReAuthAnswer_NO_NBIFOM_SUPPORT                  PolicyReAuthAnswer_FailureCode = 26
)

// Enum value maps for PolicyReAuthAnswer_FailureCode.
var (
	PolicyReAuthAnswer_FailureCode_name = map[int32]string{
		0:  "UNUSED",
		1:  "UNKNOWN_RULE_NAME",
		2:  "RATING_GROUP_ERROR",
		3:  "SERVICE_IDENTIFIER_ERROR",
		4:  "GW_PCEF_MALFUNCTION",
		5:  "RESOURCES_LIMITATION",
		6:  "MAX_NR_BEARERS_REACHED",
		7:  "UNKNOWN_BEARER_ID",
		8:  "MISSING_BEARER_ID",
		9:  "MISSING_FLOW_INFORMATION",
		10: "RESOURCE_ALLOCATION_FAILURE",
		11: "UNSUCCESSFUL_QOS_VALIDATION",
		12: "INCORRECT_FLOW_INFORMATION",
		13: "PS_TO_CS_HANDOVER",
		14: "TDF_APPLICATION_IDENTIFIER_ERROR",
		15: "NO_BEARER_FOUND",
		16: "FILTER_RESTRICTIONS",
		17: "AN_GW_FAILED",
		18: "MISSING_REDIRECT_SERVER_ADDRESS",
		19: "CM_END_USER_SERVICE_DENIED",
		20: "CM_CREDIT_CONTROL_NOT_APPLICABLE",
		21: "CM_AUTHORIZATION_REJECTED",
		22: "CM_USER_UNKNOWN",
		23: "CM_RATING_FAILED",
		24: "ROUTING_RULE_REJECTION",
		25: "UNKNOWN_ROUTING_ACCESS_INFORMATION",
		26: "NO_NBIFOM_SUPPORT",
	}
	PolicyReAuthAnswer_FailureCode_value = map[string]int32{
		"UNUSED":                             0,
		"UNKNOWN_RULE_NAME":                  1,
		"RATING_GROUP_ERROR":                 2,
		"SERVICE_IDENTIFIER_ERROR":           3,
		"GW_PCEF_MALFUNCTION":                4,
		"RESOURCES_LIMITATION":               5,
		"MAX_NR_BEARERS_REACHED":             6,
		"UNKNOWN_BEARER_ID":                  7,
		"MISSING_BEARER_ID":                  8,
		"MISSING_FLOW_INFORMATION":           9,
		"RESOURCE_ALLOCATION_FAILURE":        10,
		"UNSUCCESSFUL_QOS_VALIDATION":        11,
		"INCORRECT_FLOW_INFORMATION":         12,
		"PS_TO_CS_HANDOVER":                  13,
		"TDF_APPLICATION_IDENTIFIER_ERROR":   14,
		"NO_BEARER_FOUND":                    15,
		"FILTER_RESTRICTIONS":                16,
		"AN_GW_FAILED":                       17,
		"MISSING_REDIRECT_SERVER_ADDRESS":    18,
		"CM_END_USER_SERVICE_DENIED":         19,
		"CM_CREDIT_CONTROL_NOT_APPLICABLE":   20,
		"CM_AUTHORIZATION_REJECTED":          21,
		"CM_USER_UNKNOWN":                    22,
		"CM_RATING_FAILED":                   23,
		"ROUTING_RULE_REJECTION":             24,
		"UNKNOWN_ROUTING_ACCESS_INFORMATION": 25,
		"NO_NBIFOM_SUPPORT":                  26,
	}
)

func (x PolicyReAuthAnswer_FailureCode) Enum() *PolicyReAuthAnswer_FailureCode {
	p := new(PolicyReAuthAnswer_FailureCode)
	*p = x
	return p
}

func (x PolicyReAuthAnswer_FailureCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyReAuthAnswer_FailureCode) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[7].Descriptor()
}

func (PolicyReAuthAnswer_FailureCode) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[7]
}

func (x PolicyReAuthAnswer_FailureCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyReAuthAnswer_FailureCode.Descriptor instead.
func (PolicyReAuthAnswer_FailureCode) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{14, 0}
}

type RedirectServer_RedirectAddressType int32

const (
	RedirectServer_IPV4    RedirectServer_RedirectAddressType = 0
	RedirectServer_IPV6    RedirectServer_RedirectAddressType = 1
	RedirectServer_URL     RedirectServer_RedirectAddressType = 2
	RedirectServer_SIP_URI RedirectServer_RedirectAddressType = 3
)

// Enum value maps for RedirectServer_RedirectAddressType.
var (
	RedirectServer_RedirectAddressType_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
		2: "URL",
		3: "SIP_URI",
	}
	RedirectServer_RedirectAddressType_value = map[string]int32{
		"IPV4":    0,
		"IPV6":    1,
		"URL":     2,
		"SIP_URI": 3,
	}
)

func (x RedirectServer_RedirectAddressType) Enum() *RedirectServer_RedirectAddressType {
	p := new(RedirectServer_RedirectAddressType)
	*p = x
	return p
}

func (x RedirectServer_RedirectAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectServer_RedirectAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[8].Descriptor()
}

func (RedirectServer_RedirectAddressType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[8]
}

func (x RedirectServer_RedirectAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectServer_RedirectAddressType.Descriptor instead.
func (RedirectServer_RedirectAddressType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{17, 0}
}

type ChargingCredit_UnitType int32

const (
	ChargingCredit_BYTES   ChargingCredit_UnitType = 0
	ChargingCredit_SECONDS ChargingCredit_UnitType = 1
)

// Enum value maps for ChargingCredit_UnitType.
var (
	ChargingCredit_UnitType_name = map[int32]string{
		0: "BYTES",
		1: "SECONDS",
	}
	ChargingCredit_UnitType_value = map[string]int32{
		"BYTES":   0,
		"SECONDS": 1,
	}
)

func (x ChargingCredit_UnitType) Enum() *ChargingCredit_UnitType {
	p := new(ChargingCredit_UnitType)
	*p = x
	return p
}

func (x ChargingCredit_UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingCredit_UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[9].Descriptor()
}

func (ChargingCredit_UnitType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[9]
}

func (x ChargingCredit_UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingCredit_UnitType.Descriptor instead.
func (ChargingCredit_UnitType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{18, 0}
}

type ChargingCredit_FinalAction int32

const (
	ChargingCredit_TERMINATE       ChargingCredit_FinalAction = 0
	ChargingCredit_REDIRECT        ChargingCredit_FinalAction = 1
	ChargingCredit_RESTRICT_ACCESS ChargingCredit_FinalAction = 2
)

// Enum value maps for ChargingCredit_FinalAction.
var (
	ChargingCredit_FinalAction_name = map[int32]string{
		0: "TERMINATE",
		1: "REDIRECT",
		2: "RESTRICT_ACCESS",
	}
	ChargingCredit_FinalAction_value = map[string]int32{
		"TERMINATE":       0,
		"REDIRECT":        1,
		"RESTRICT_ACCESS": 2,
	}
)

func (x ChargingCredit_FinalAction) Enum() *ChargingCredit_FinalAction {
	p := new(ChargingCredit_FinalAction)
	*p = x
	return p
}

func (x ChargingCredit_FinalAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingCredit_FinalAction) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[10].Descriptor()
}

func (ChargingCredit_FinalAction) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[10]
}

func (x ChargingCredit_FinalAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingCredit_FinalAction.Descriptor instead.
func (ChargingCredit_FinalAction) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{18, 1}
}

type CreditUsage_UpdateType int32

const (
	CreditUsage_THRESHOLD               CreditUsage_UpdateType = 0
	CreditUsage_QHT                     CreditUsage_UpdateType = 1
	CreditUsage_TERMINATED              CreditUsage_UpdateType = 2 // FINAL - UE disconnected, flow not in use
	CreditUsage_QUOTA_EXHAUSTED         CreditUsage_UpdateType = 3 // UE hit credit limit
	CreditUsage_VALIDITY_TIMER_EXPIRED  CreditUsage_UpdateType = 4 // Credit expired
	CreditUsage_OTHER_QUOTA_TYPE        CreditUsage_UpdateType = 5
	CreditUsage_RATING_CONDITION_CHANGE CreditUsage_UpdateType = 6
	CreditUsage_REAUTH_REQUIRED         CreditUsage_UpdateType = 7 // FORCED_REAUTHORISATION
	CreditUsage_POOL_EXHAUSTED          CreditUsage_UpdateType = 8
)

// Enum value maps for CreditUsage_UpdateType.
var (
	CreditUsage_UpdateType_name = map[int32]string{
		0: "THRESHOLD",
		1: "QHT",
		2: "TERMINATED",
		3: "QUOTA_EXHAUSTED",
		4: "VALIDITY_TIMER_EXPIRED",
		5: "OTHER_QUOTA_TYPE",
		6: "RATING_CONDITION_CHANGE",
		7: "REAUTH_REQUIRED",
		8: "POOL_EXHAUSTED",
	}
	CreditUsage_UpdateType_value = map[string]int32{
		"THRESHOLD":               0,
		"QHT":                     1,
		"TERMINATED":              2,
		"QUOTA_EXHAUSTED":         3,
		"VALIDITY_TIMER_EXPIRED":  4,
		"OTHER_QUOTA_TYPE":        5,
		"RATING_CONDITION_CHANGE": 6,
		"REAUTH_REQUIRED":         7,
		"POOL_EXHAUSTED":          8,
	}
)

func (x CreditUsage_UpdateType) Enum() *CreditUsage_UpdateType {
	p := new(CreditUsage_UpdateType)
	*p = x
	return p
}

func (x CreditUsage_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditUsage_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[11].Descriptor()
}

func (CreditUsage_UpdateType) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[11]
}

func (x CreditUsage_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditUsage_UpdateType.Descriptor instead.
func (CreditUsage_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{19, 0}
}

type UsageMonitoringCredit_Action int32

const (
	UsageMonitoringCredit_CONTINUE UsageMonitoringCredit_Action = 0 // continue monitoring as normal
	UsageMonitoringCredit_DISABLE  UsageMonitoringCredit_Action = 1 // no need to monitor any more
)

// Enum value maps for UsageMonitoringCredit_Action.
var (
	UsageMonitoringCredit_Action_name = map[int32]string{
		0: "CONTINUE",
		1: "DISABLE",
	}
	UsageMonitoringCredit_Action_value = map[string]int32{
		"CONTINUE": 0,
		"DISABLE":  1,
	}
)

func (x UsageMonitoringCredit_Action) Enum() *UsageMonitoringCredit_Action {
	p := new(UsageMonitoringCredit_Action)
	*p = x
	return p
}

func (x UsageMonitoringCredit_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageMonitoringCredit_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_session_manager_proto_enumTypes[12].Descriptor()
}

func (UsageMonitoringCredit_Action) Type() protoreflect.EnumType {
	return &file_session_manager_proto_enumTypes[12]
}

func (x UsageMonitoringCredit_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageMonitoringCredit_Action.Descriptor instead.
func (UsageMonitoringCredit_Action) EnumDescriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{23, 0}
}

type RuleRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // Session ID - specified as IMSI
	RuleId  string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	BytesTx uint64 `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx uint64 `protobuf:"varint,4,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
}

func (x *RuleRecord) Reset() {
	*x = RuleRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRecord) ProtoMessage() {}

func (x *RuleRecord) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRecord.ProtoReflect.Descriptor instead.
func (*RuleRecord) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{0}
}

func (x *RuleRecord) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RuleRecord) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RuleRecord) GetBytesTx() uint64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *RuleRecord) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

type RuleRecordTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RuleRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Epoch   uint64        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *RuleRecordTable) Reset() {
	*x = RuleRecordTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRecordTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRecordTable) ProtoMessage() {}

func (x *RuleRecordTable) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRecordTable.ProtoReflect.Descriptor instead.
func (*RuleRecordTable) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{1}
}

func (x *RuleRecordTable) GetRecords() []*RuleRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RuleRecordTable) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type LocalCreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid                *SubscriberID          `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`                                                   // Included in Common ctx
	UeIpv4             string                 `protobuf:"bytes,2,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`                               // Included in Common ctx
	SpgwIpv4           string                 `protobuf:"bytes,3,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`                         // Included in LTE ctx
	Apn                string                 `protobuf:"bytes,4,opt,name=apn,proto3" json:"apn,omitempty"`                                                   // Included in Common ctx
	Imei               string                 `protobuf:"bytes,6,opt,name=imei,proto3" json:"imei,omitempty"`                                                 // Included in LTE ctx
	PlmnId             string                 `protobuf:"bytes,7,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`                               // Included in LTE ctx
	ImsiPlmnId         string                 `protobuf:"bytes,8,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`                 // Included in LTE ctx
	UserLocation       []byte                 `protobuf:"bytes,9,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`             // Included in LTE ctx
	QosInfo            *QosInformationRequest `protobuf:"bytes,10,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`                           // Included in LTE ctx
	Msisdn             []byte                 `protobuf:"bytes,11,opt,name=msisdn,proto3" json:"msisdn,omitempty"`                                            // Included in Common ctx
	RatType            RATType                `protobuf:"varint,12,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`   // Included in Common ctx
	HardwareAddr       []byte                 `protobuf:"bytes,13,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"`            // MAC Address for WLAN
	RadiusSessionId    string                 `protobuf:"bytes,14,opt,name=radius_session_id,json=radiusSessionId,proto3" json:"radius_session_id,omitempty"` // Included in WLAN ctx
	BearerId           uint32                 `protobuf:"varint,15,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`                       // Included in LTE ctx
	CommonContext      *CommonSessionContext  `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext *RatSpecificContext    `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *LocalCreateSessionRequest) Reset() {
	*x = LocalCreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCreateSessionRequest) ProtoMessage() {}

func (x *LocalCreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCreateSessionRequest.ProtoReflect.Descriptor instead.
func (*LocalCreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{2}
}

func (x *LocalCreateSessionRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetQosInfo() *QosInformationRequest {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *LocalCreateSessionRequest) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetRadiusSessionId() string {
	if x != nil {
		return x.RadiusSessionId
	}
	return ""
}

func (x *LocalCreateSessionRequest) GetBearerId() uint32 {
	if x != nil {
		return x.BearerId
	}
	return 0
}

func (x *LocalCreateSessionRequest) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *LocalCreateSessionRequest) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

type CommonSessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	UeIpv4  string        `protobuf:"bytes,3,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	Apn     string        `protobuf:"bytes,4,opt,name=apn,proto3" json:"apn,omitempty"`
	Msisdn  []byte        `protobuf:"bytes,5,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	RatType RATType       `protobuf:"varint,6,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
}

func (x *CommonSessionContext) Reset() {
	*x = CommonSessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSessionContext) ProtoMessage() {}

func (x *CommonSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSessionContext.ProtoReflect.Descriptor instead.
func (*CommonSessionContext) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{3}
}

func (x *CommonSessionContext) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *CommonSessionContext) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *CommonSessionContext) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *CommonSessionContext) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *CommonSessionContext) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

type RatSpecificContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Context:
	//	*RatSpecificContext_LteContext
	//	*RatSpecificContext_WlanContext
	Context isRatSpecificContext_Context `protobuf_oneof:"context"`
}

func (x *RatSpecificContext) Reset() {
	*x = RatSpecificContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatSpecificContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatSpecificContext) ProtoMessage() {}

func (x *RatSpecificContext) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatSpecificContext.ProtoReflect.Descriptor instead.
func (*RatSpecificContext) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{4}
}

func (m *RatSpecificContext) GetContext() isRatSpecificContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *RatSpecificContext) GetLteContext() *LTESessionContext {
	if x, ok := x.GetContext().(*RatSpecificContext_LteContext); ok {
		return x.LteContext
	}
	return nil
}

func (x *RatSpecificContext) GetWlanContext() *WLANSessionContext {
	if x, ok := x.GetContext().(*RatSpecificContext_WlanContext); ok {
		return x.WlanContext
	}
	return nil
}

type isRatSpecificContext_Context interface {
	isRatSpecificContext_Context()
}

type RatSpecificContext_LteContext struct {
	LteContext *LTESessionContext `protobuf:"bytes,17,opt,name=lte_context,json=lteContext,proto3,oneof"`
}

type RatSpecificContext_WlanContext struct {
	WlanContext *WLANSessionContext `protobuf:"bytes,18,opt,name=wlan_context,json=wlanContext,proto3,oneof"`
}

func (*RatSpecificContext_LteContext) isRatSpecificContext_Context() {}

func (*RatSpecificContext_WlanContext) isRatSpecificContext_Context() {}

type LTESessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpgwIpv4     string                 `protobuf:"bytes,1,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei         string                 `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId       string                 `protobuf:"bytes,3,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId   string                 `protobuf:"bytes,4,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation []byte                 `protobuf:"bytes,5,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	QosInfo      *QosInformationRequest `protobuf:"bytes,6,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	BearerId     uint32                 `protobuf:"varint,7,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
}

func (x *LTESessionContext) Reset() {
	*x = LTESessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTESessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTESessionContext) ProtoMessage() {}

func (x *LTESessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTESessionContext.ProtoReflect.Descriptor instead.
func (*LTESessionContext) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{5}
}

func (x *LTESessionContext) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *LTESessionContext) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *LTESessionContext) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *LTESessionContext) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *LTESessionContext) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *LTESessionContext) GetQosInfo() *QosInformationRequest {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

func (x *LTESessionContext) GetBearerId() uint32 {
	if x != nil {
		return x.BearerId
	}
	return 0
}

type WLANSessionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddrBinary   []byte `protobuf:"bytes,1,opt,name=mac_addr_binary,json=macAddrBinary,proto3" json:"mac_addr_binary,omitempty"`
	MacAddr         string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	RadiusSessionId string `protobuf:"bytes,3,opt,name=radius_session_id,json=radiusSessionId,proto3" json:"radius_session_id,omitempty"`
}

func (x *WLANSessionContext) Reset() {
	*x = WLANSessionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WLANSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WLANSessionContext) ProtoMessage() {}

func (x *WLANSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WLANSessionContext.ProtoReflect.Descriptor instead.
func (*WLANSessionContext) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{6}
}

func (x *WLANSessionContext) GetMacAddrBinary() []byte {
	if x != nil {
		return x.MacAddrBinary
	}
	return nil
}

func (x *WLANSessionContext) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *WLANSessionContext) GetRadiusSessionId() string {
	if x != nil {
		return x.RadiusSessionId
	}
	return ""
}

type LocalCreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *LocalCreateSessionResponse) Reset() {
	*x = LocalCreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCreateSessionResponse) ProtoMessage() {}

func (x *LocalCreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCreateSessionResponse.ProtoReflect.Descriptor instead.
func (*LocalCreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{7}
}

func (x *LocalCreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type LocalEndSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Apn string        `protobuf:"bytes,2,opt,name=apn,proto3" json:"apn,omitempty"`
}

func (x *LocalEndSessionRequest) Reset() {
	*x = LocalEndSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalEndSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalEndSessionRequest) ProtoMessage() {}

func (x *LocalEndSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalEndSessionRequest.ProtoReflect.Descriptor instead.
func (*LocalEndSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{8}
}

func (x *LocalEndSessionRequest) GetSid() *SubscriberID {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *LocalEndSessionRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

type LocalEndSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalEndSessionResponse) Reset() {
	*x = LocalEndSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalEndSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalEndSessionResponse) ProtoMessage() {}

func (x *LocalEndSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalEndSessionResponse.ProtoReflect.Descriptor instead.
func (*LocalEndSessionResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{9}
}

type ChargingReAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId         string                     `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ChargingKey       uint32                     `protobuf:"varint,2,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Sid               string                     `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	Type              ChargingReAuthRequest_Type `protobuf:"varint,4,opt,name=type,proto3,enum=magma.lte.ChargingReAuthRequest_Type" json:"type,omitempty"`
	ServiceIdentifier *ServiceIdentifier         `protobuf:"bytes,5,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
}

func (x *ChargingReAuthRequest) Reset() {
	*x = ChargingReAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingReAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingReAuthRequest) ProtoMessage() {}

func (x *ChargingReAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingReAuthRequest.ProtoReflect.Descriptor instead.
func (*ChargingReAuthRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{10}
}

func (x *ChargingReAuthRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChargingReAuthRequest) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *ChargingReAuthRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *ChargingReAuthRequest) GetType() ChargingReAuthRequest_Type {
	if x != nil {
		return x.Type
	}
	return ChargingReAuthRequest_SINGLE_SERVICE
}

func (x *ChargingReAuthRequest) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

type ChargingReAuthAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ReAuthResult `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.ReAuthResult" json:"result,omitempty"`
}

func (x *ChargingReAuthAnswer) Reset() {
	*x = ChargingReAuthAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingReAuthAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingReAuthAnswer) ProtoMessage() {}

func (x *ChargingReAuthAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingReAuthAnswer.ProtoReflect.Descriptor instead.
func (*ChargingReAuthAnswer) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ChargingReAuthAnswer) GetResult() ReAuthResult {
	if x != nil {
		return x.Result
	}
	return ReAuthResult_UPDATE_INITIATED
}

type PolicyReAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	SessionId              string                   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Imsi                   string                   `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	RulesToRemove          []string                 `protobuf:"bytes,3,rep,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	RulesToInstall         []*StaticRuleInstall     `protobuf:"bytes,6,rep,name=rules_to_install,json=rulesToInstall,proto3" json:"rules_to_install,omitempty"`
	DynamicRulesToInstall  []*DynamicRuleInstall    `protobuf:"bytes,7,rep,name=dynamic_rules_to_install,json=dynamicRulesToInstall,proto3" json:"dynamic_rules_to_install,omitempty"`
	EventTriggers          []EventTrigger           `protobuf:"varint,8,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime       *timestamp.Timestamp     `protobuf:"bytes,9,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	UsageMonitoringCredits []*UsageMonitoringCredit `protobuf:"bytes,10,rep,name=usage_monitoring_credits,json=usageMonitoringCredits,proto3" json:"usage_monitoring_credits,omitempty"`
	QosInfo                *QoSInformation          `protobuf:"bytes,11,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
}

func (x *PolicyReAuthRequest) Reset() {
	*x = PolicyReAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyReAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReAuthRequest) ProtoMessage() {}

func (x *PolicyReAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReAuthRequest.ProtoReflect.Descriptor instead.
func (*PolicyReAuthRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{12}
}

func (x *PolicyReAuthRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PolicyReAuthRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *PolicyReAuthRequest) GetRulesToRemove() []string {
	if x != nil {
		return x.RulesToRemove
	}
	return nil
}

func (x *PolicyReAuthRequest) GetRulesToInstall() []*StaticRuleInstall {
	if x != nil {
		return x.RulesToInstall
	}
	return nil
}

func (x *PolicyReAuthRequest) GetDynamicRulesToInstall() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRulesToInstall
	}
	return nil
}

func (x *PolicyReAuthRequest) GetEventTriggers() []EventTrigger {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *PolicyReAuthRequest) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

func (x *PolicyReAuthRequest) GetUsageMonitoringCredits() []*UsageMonitoringCredit {
	if x != nil {
		return x.UsageMonitoringCredits
	}
	return nil
}

func (x *PolicyReAuthRequest) GetQosInfo() *QoSInformation {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

type QoSInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BearerId string `protobuf:"bytes,1,opt,name=bearer_id,json=bearerId,proto3" json:"bearer_id,omitempty"`
	Qci      QCI    `protobuf:"varint,2,opt,name=qci,proto3,enum=magma.lte.QCI" json:"qci,omitempty"`
}

func (x *QoSInformation) Reset() {
	*x = QoSInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSInformation) ProtoMessage() {}

func (x *QoSInformation) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSInformation.ProtoReflect.Descriptor instead.
func (*QoSInformation) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{13}
}

func (x *QoSInformation) GetBearerId() string {
	if x != nil {
		return x.BearerId
	}
	return ""
}

func (x *QoSInformation) GetQci() QCI {
	if x != nil {
		return x.Qci
	}
	return QCI_QCI_0
}

type PolicyReAuthAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string                                    `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Result      ReAuthResult                              `protobuf:"varint,2,opt,name=result,proto3,enum=magma.lte.ReAuthResult" json:"result,omitempty"`
	FailedRules map[string]PolicyReAuthAnswer_FailureCode `protobuf:"bytes,3,rep,name=failed_rules,json=failedRules,proto3" json:"failed_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=magma.lte.PolicyReAuthAnswer_FailureCode"`
}

func (x *PolicyReAuthAnswer) Reset() {
	*x = PolicyReAuthAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyReAuthAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReAuthAnswer) ProtoMessage() {}

func (x *PolicyReAuthAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReAuthAnswer.ProtoReflect.Descriptor instead.
func (*PolicyReAuthAnswer) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{14}
}

func (x *PolicyReAuthAnswer) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PolicyReAuthAnswer) GetResult() ReAuthResult {
	if x != nil {
		return x.Result
	}
	return ReAuthResult_UPDATE_INITIATED
}

func (x *PolicyReAuthAnswer) GetFailedRules() map[string]PolicyReAuthAnswer_FailureCode {
	if x != nil {
		return x.FailedRules
	}
	return nil
}

type CreditUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Volume  uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *CreditUnit) Reset() {
	*x = CreditUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUnit) ProtoMessage() {}

func (x *CreditUnit) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUnit.ProtoReflect.Descriptor instead.
func (*CreditUnit) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{15}
}

func (x *CreditUnit) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CreditUnit) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type GrantedUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *CreditUnit `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Tx    *CreditUnit `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx    *CreditUnit `protobuf:"bytes,3,opt,name=rx,proto3" json:"rx,omitempty"`
}

func (x *GrantedUnits) Reset() {
	*x = GrantedUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedUnits) ProtoMessage() {}

func (x *GrantedUnits) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedUnits.ProtoReflect.Descriptor instead.
func (*GrantedUnits) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{16}
}

func (x *GrantedUnits) GetTotal() *CreditUnit {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *GrantedUnits) GetTx() *CreditUnit {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *GrantedUnits) GetRx() *CreditUnit {
	if x != nil {
		return x.Rx
	}
	return nil
}

type RedirectServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectAddressType   RedirectServer_RedirectAddressType `protobuf:"varint,1,opt,name=redirect_address_type,json=redirectAddressType,proto3,enum=magma.lte.RedirectServer_RedirectAddressType" json:"redirect_address_type,omitempty"`
	RedirectServerAddress string                             `protobuf:"bytes,2,opt,name=redirect_server_address,json=redirectServerAddress,proto3" json:"redirect_server_address,omitempty"`
}

func (x *RedirectServer) Reset() {
	*x = RedirectServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectServer) ProtoMessage() {}

func (x *RedirectServer) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectServer.ProtoReflect.Descriptor instead.
func (*RedirectServer) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{17}
}

func (x *RedirectServer) GetRedirectAddressType() RedirectServer_RedirectAddressType {
	if x != nil {
		return x.RedirectAddressType
	}
	return RedirectServer_IPV4
}

func (x *RedirectServer) GetRedirectServerAddress() string {
	if x != nil {
		return x.RedirectServerAddress
	}
	return ""
}

type ChargingCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           ChargingCredit_UnitType    `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.ChargingCredit_UnitType" json:"type,omitempty"`
	ValidityTime   uint32                     `protobuf:"varint,3,opt,name=validity_time,json=validityTime,proto3" json:"validity_time,omitempty"` // seconds
	IsFinal        bool                       `protobuf:"varint,4,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	FinalAction    ChargingCredit_FinalAction `protobuf:"varint,5,opt,name=final_action,json=finalAction,proto3,enum=magma.lte.ChargingCredit_FinalAction" json:"final_action,omitempty"`
	GrantedUnits   *GrantedUnits              `protobuf:"bytes,6,opt,name=granted_units,json=grantedUnits,proto3" json:"granted_units,omitempty"`
	RedirectServer *RedirectServer            `protobuf:"bytes,7,opt,name=redirect_server,json=redirectServer,proto3" json:"redirect_server,omitempty"`
}

func (x *ChargingCredit) Reset() {
	*x = ChargingCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingCredit) ProtoMessage() {}

func (x *ChargingCredit) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingCredit.ProtoReflect.Descriptor instead.
func (*ChargingCredit) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{18}
}

func (x *ChargingCredit) GetType() ChargingCredit_UnitType {
	if x != nil {
		return x.Type
	}
	return ChargingCredit_BYTES
}

func (x *ChargingCredit) GetValidityTime() uint32 {
	if x != nil {
		return x.ValidityTime
	}
	return 0
}

func (x *ChargingCredit) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *ChargingCredit) GetFinalAction() ChargingCredit_FinalAction {
	if x != nil {
		return x.FinalAction
	}
	return ChargingCredit_TERMINATE
}

func (x *ChargingCredit) GetGrantedUnits() *GrantedUnits {
	if x != nil {
		return x.GrantedUnits
	}
	return nil
}

func (x *ChargingCredit) GetRedirectServer() *RedirectServer {
	if x != nil {
		return x.RedirectServer
	}
	return nil
}

type CreditUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesTx           uint64                 `protobuf:"varint,1,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx           uint64                 `protobuf:"varint,2,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	ChargingKey       uint32                 `protobuf:"varint,4,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Type              CreditUsage_UpdateType `protobuf:"varint,5,opt,name=type,proto3,enum=magma.lte.CreditUsage_UpdateType" json:"type,omitempty"`
	MonitoringKey     []byte                 `protobuf:"bytes,6,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	ServiceIdentifier *ServiceIdentifier     `protobuf:"bytes,7,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
}

func (x *CreditUsage) Reset() {
	*x = CreditUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsage) ProtoMessage() {}

func (x *CreditUsage) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsage.ProtoReflect.Descriptor instead.
func (*CreditUsage) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{19}
}

func (x *CreditUsage) GetBytesTx() uint64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *CreditUsage) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

func (x *CreditUsage) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *CreditUsage) GetType() CreditUsage_UpdateType {
	if x != nil {
		return x.Type
	}
	return CreditUsage_THRESHOLD
}

func (x *CreditUsage) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *CreditUsage) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

type CreditUsageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage              *CreditUsage          `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
	SessionId          string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestNumber      uint32                `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"` // unique among session
	Sid                string                `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`                                           // System Identification Number
	Msisdn             []byte                `protobuf:"bytes,5,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	UeIpv4             string                `protobuf:"bytes,6,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	SpgwIpv4           string                `protobuf:"bytes,7,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Apn                string                `protobuf:"bytes,8,opt,name=apn,proto3" json:"apn,omitempty"`
	Imei               string                `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId             string                `protobuf:"bytes,10,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId         string                `protobuf:"bytes,11,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation       []byte                `protobuf:"bytes,12,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	RatType            RATType               `protobuf:"varint,13,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	HardwareAddr       []byte                `protobuf:"bytes,14,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	TgppCtx            *TgppContext          `protobuf:"bytes,15,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	CommonContext      *CommonSessionContext `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext *RatSpecificContext   `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *CreditUsageUpdate) Reset() {
	*x = CreditUsageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsageUpdate) ProtoMessage() {}

func (x *CreditUsageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsageUpdate.ProtoReflect.Descriptor instead.
func (*CreditUsageUpdate) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{20}
}

func (x *CreditUsageUpdate) GetUsage() *CreditUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *CreditUsageUpdate) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreditUsageUpdate) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *CreditUsageUpdate) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CreditUsageUpdate) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *CreditUsageUpdate) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *CreditUsageUpdate) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *CreditUsageUpdate) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *CreditUsageUpdate) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CreditUsageUpdate) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *CreditUsageUpdate) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *CreditUsageUpdate) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *CreditUsageUpdate) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *CreditUsageUpdate) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *CreditUsageUpdate) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *CreditUsageUpdate) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *CreditUsageUpdate) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

type CreditUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success           bool               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Sid               string             `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	ChargingKey       uint32             `protobuf:"varint,3,opt,name=charging_key,json=chargingKey,proto3" json:"charging_key,omitempty"`
	Credit            *ChargingCredit    `protobuf:"bytes,4,opt,name=credit,proto3" json:"credit,omitempty"`
	ResultCode        uint32             `protobuf:"varint,6,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ServiceIdentifier *ServiceIdentifier `protobuf:"bytes,7,opt,name=service_identifier,json=serviceIdentifier,proto3" json:"service_identifier,omitempty"`
	// When this is set to an infinite limit, field 'credit' should be ignored
	LimitType CreditLimitType `protobuf:"varint,9,opt,name=limit_type,json=limitType,proto3,enum=magma.lte.CreditLimitType" json:"limit_type,omitempty"`
	TgppCtx   *TgppContext    `protobuf:"bytes,10,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
}

func (x *CreditUpdateResponse) Reset() {
	*x = CreditUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUpdateResponse) ProtoMessage() {}

func (x *CreditUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUpdateResponse.ProtoReflect.Descriptor instead.
func (*CreditUpdateResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{21}
}

func (x *CreditUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreditUpdateResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CreditUpdateResponse) GetChargingKey() uint32 {
	if x != nil {
		return x.ChargingKey
	}
	return 0
}

func (x *CreditUpdateResponse) GetCredit() *ChargingCredit {
	if x != nil {
		return x.Credit
	}
	return nil
}

func (x *CreditUpdateResponse) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *CreditUpdateResponse) GetServiceIdentifier() *ServiceIdentifier {
	if x != nil {
		return x.ServiceIdentifier
	}
	return nil
}

func (x *CreditUpdateResponse) GetLimitType() CreditLimitType {
	if x != nil {
		return x.LimitType
	}
	return CreditLimitType_FINITE
}

func (x *CreditUpdateResponse) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

// Used amount for a usage monitor
type UsageMonitorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitoringKey []byte          `protobuf:"bytes,1,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Level         MonitoringLevel `protobuf:"varint,2,opt,name=level,proto3,enum=magma.lte.MonitoringLevel" json:"level,omitempty"`
	BytesTx       uint64          `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	BytesRx       uint64          `protobuf:"varint,4,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
}

func (x *UsageMonitorUpdate) Reset() {
	*x = UsageMonitorUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitorUpdate) ProtoMessage() {}

func (x *UsageMonitorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitorUpdate.ProtoReflect.Descriptor instead.
func (*UsageMonitorUpdate) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{22}
}

func (x *UsageMonitorUpdate) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *UsageMonitorUpdate) GetLevel() MonitoringLevel {
	if x != nil {
		return x.Level
	}
	return MonitoringLevel_SESSION_LEVEL
}

func (x *UsageMonitorUpdate) GetBytesTx() uint64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *UsageMonitorUpdate) GetBytesRx() uint64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

// New received threshold for a usage monitor
type UsageMonitoringCredit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        UsageMonitoringCredit_Action `protobuf:"varint,1,opt,name=action,proto3,enum=magma.lte.UsageMonitoringCredit_Action" json:"action,omitempty"`
	MonitoringKey []byte                       `protobuf:"bytes,2,opt,name=monitoring_key,json=monitoringKey,proto3" json:"monitoring_key,omitempty"`
	Level         MonitoringLevel              `protobuf:"varint,3,opt,name=level,proto3,enum=magma.lte.MonitoringLevel" json:"level,omitempty"`
	GrantedUnits  *GrantedUnits                `protobuf:"bytes,5,opt,name=granted_units,json=grantedUnits,proto3" json:"granted_units,omitempty"`
}

func (x *UsageMonitoringCredit) Reset() {
	*x = UsageMonitoringCredit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringCredit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringCredit) ProtoMessage() {}

func (x *UsageMonitoringCredit) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringCredit.ProtoReflect.Descriptor instead.
func (*UsageMonitoringCredit) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{23}
}

func (x *UsageMonitoringCredit) GetAction() UsageMonitoringCredit_Action {
	if x != nil {
		return x.Action
	}
	return UsageMonitoringCredit_CONTINUE
}

func (x *UsageMonitoringCredit) GetMonitoringKey() []byte {
	if x != nil {
		return x.MonitoringKey
	}
	return nil
}

func (x *UsageMonitoringCredit) GetLevel() MonitoringLevel {
	if x != nil {
		return x.Level
	}
	return MonitoringLevel_SESSION_LEVEL
}

func (x *UsageMonitoringCredit) GetGrantedUnits() *GrantedUnits {
	if x != nil {
		return x.GrantedUnits
	}
	return nil
}

// A request to update a usage monitor given its usage and session information
// TODO this message name is misleading since we don't only use it for
// usage reporting
type UsageMonitoringUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update        *UsageMonitorUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	SessionId     string              `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestNumber uint32              `protobuf:"varint,3,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"` // unique among session
	Sid           string              `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`                                           // System Identification Number
	UeIpv4        string              `protobuf:"bytes,5,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	HardwareAddr  []byte              `protobuf:"bytes,6,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	RatType       RATType             `protobuf:"varint,7,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	TgppCtx       *TgppContext        `protobuf:"bytes,8,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	EventTrigger  EventTrigger        `protobuf:"varint,9,opt,name=event_trigger,json=eventTrigger,proto3,enum=magma.lte.EventTrigger" json:"event_trigger,omitempty"`
}

func (x *UsageMonitoringUpdateRequest) Reset() {
	*x = UsageMonitoringUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringUpdateRequest) ProtoMessage() {}

func (x *UsageMonitoringUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringUpdateRequest.ProtoReflect.Descriptor instead.
func (*UsageMonitoringUpdateRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{24}
}

func (x *UsageMonitoringUpdateRequest) GetUpdate() *UsageMonitorUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UsageMonitoringUpdateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UsageMonitoringUpdateRequest) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *UsageMonitoringUpdateRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UsageMonitoringUpdateRequest) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *UsageMonitoringUpdateRequest) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *UsageMonitoringUpdateRequest) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *UsageMonitoringUpdateRequest) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *UsageMonitoringUpdateRequest) GetEventTrigger() EventTrigger {
	if x != nil {
		return x.EventTrigger
	}
	return EventTrigger_SGSN_CHANGE
}

// Response to a usage monitor update with the credit received and session info
type UsageMonitoringUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credit                *UsageMonitoringCredit `protobuf:"bytes,1,opt,name=credit,proto3" json:"credit,omitempty"`
	SessionId             string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Sid                   string                 `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	Success               bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	EventTriggers         []EventTrigger         `protobuf:"varint,5,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime      *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
	ResultCode            uint32                 `protobuf:"varint,7,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	RulesToRemove         []string               `protobuf:"bytes,8,rep,name=rules_to_remove,json=rulesToRemove,proto3" json:"rules_to_remove,omitempty"`
	StaticRulesToInstall  []*StaticRuleInstall   `protobuf:"bytes,9,rep,name=static_rules_to_install,json=staticRulesToInstall,proto3" json:"static_rules_to_install,omitempty"`
	DynamicRulesToInstall []*DynamicRuleInstall  `protobuf:"bytes,10,rep,name=dynamic_rules_to_install,json=dynamicRulesToInstall,proto3" json:"dynamic_rules_to_install,omitempty"`
	TgppCtx               *TgppContext           `protobuf:"bytes,11,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
}

func (x *UsageMonitoringUpdateResponse) Reset() {
	*x = UsageMonitoringUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageMonitoringUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageMonitoringUpdateResponse) ProtoMessage() {}

func (x *UsageMonitoringUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageMonitoringUpdateResponse.ProtoReflect.Descriptor instead.
func (*UsageMonitoringUpdateResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{25}
}

func (x *UsageMonitoringUpdateResponse) GetCredit() *UsageMonitoringCredit {
	if x != nil {
		return x.Credit
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UsageMonitoringUpdateResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UsageMonitoringUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UsageMonitoringUpdateResponse) GetEventTriggers() []EventTrigger {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetResultCode() uint32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *UsageMonitoringUpdateResponse) GetRulesToRemove() []string {
	if x != nil {
		return x.RulesToRemove
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetStaticRulesToInstall() []*StaticRuleInstall {
	if x != nil {
		return x.StaticRulesToInstall
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetDynamicRulesToInstall() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRulesToInstall
	}
	return nil
}

func (x *UsageMonitoringUpdateResponse) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

// QoS Information to be sent in CCR-Init message
type QosInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnAmbrDl               uint32 `protobuf:"varint,1,opt,name=apn_ambr_dl,json=apnAmbrDl,proto3" json:"apn_ambr_dl,omitempty"`
	ApnAmbrUl               uint32 `protobuf:"varint,2,opt,name=apn_ambr_ul,json=apnAmbrUl,proto3" json:"apn_ambr_ul,omitempty"`
	PriorityLevel           uint32 `protobuf:"varint,3,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PreemptionCapability    uint32 `protobuf:"varint,4,opt,name=preemption_capability,json=preemptionCapability,proto3" json:"preemption_capability,omitempty"`
	PreemptionVulnerability uint32 `protobuf:"varint,5,opt,name=preemption_vulnerability,json=preemptionVulnerability,proto3" json:"preemption_vulnerability,omitempty"`
	QosClassId              uint32 `protobuf:"varint,6,opt,name=qos_class_id,json=qosClassId,proto3" json:"qos_class_id,omitempty"`
}

func (x *QosInformationRequest) Reset() {
	*x = QosInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosInformationRequest) ProtoMessage() {}

func (x *QosInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosInformationRequest.ProtoReflect.Descriptor instead.
func (*QosInformationRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{26}
}

func (x *QosInformationRequest) GetApnAmbrDl() uint32 {
	if x != nil {
		return x.ApnAmbrDl
	}
	return 0
}

func (x *QosInformationRequest) GetApnAmbrUl() uint32 {
	if x != nil {
		return x.ApnAmbrUl
	}
	return 0
}

func (x *QosInformationRequest) GetPriorityLevel() uint32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *QosInformationRequest) GetPreemptionCapability() uint32 {
	if x != nil {
		return x.PreemptionCapability
	}
	return 0
}

func (x *QosInformationRequest) GetPreemptionVulnerability() uint32 {
	if x != nil {
		return x.PreemptionVulnerability
	}
	return 0
}

func (x *QosInformationRequest) GetQosClassId() uint32 {
	if x != nil {
		return x.QosClassId
	}
	return 0
}

// TgppContext is a session specific 3GPP context session proxy may meed session manager to persist
type TgppContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GxDestHost string `protobuf:"bytes,1,opt,name=gx_dest_host,json=gxDestHost,proto3" json:"gx_dest_host,omitempty"`
	GyDestHost string `protobuf:"bytes,2,opt,name=gy_dest_host,json=gyDestHost,proto3" json:"gy_dest_host,omitempty"`
}

func (x *TgppContext) Reset() {
	*x = TgppContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TgppContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TgppContext) ProtoMessage() {}

func (x *TgppContext) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TgppContext.ProtoReflect.Descriptor instead.
func (*TgppContext) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{27}
}

func (x *TgppContext) GetGxDestHost() string {
	if x != nil {
		return x.GxDestHost
	}
	return ""
}

func (x *TgppContext) GetGyDestHost() string {
	if x != nil {
		return x.GyDestHost
	}
	return ""
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriber         *SubscriberID          `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	SessionId          string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UeIpv4             string                 `protobuf:"bytes,3,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	SpgwIpv4           string                 `protobuf:"bytes,4,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Apn                string                 `protobuf:"bytes,5,opt,name=apn,proto3" json:"apn,omitempty"`
	Imei               string                 `protobuf:"bytes,7,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId             string                 `protobuf:"bytes,8,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId         string                 `protobuf:"bytes,9,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation       []byte                 `protobuf:"bytes,10,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	QosInfo            *QosInformationRequest `protobuf:"bytes,11,opt,name=qos_info,json=qosInfo,proto3" json:"qos_info,omitempty"`
	Msisdn             []byte                 `protobuf:"bytes,12,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	GcId               string                 `protobuf:"bytes,13,opt,name=gc_id,json=gcId,proto3" json:"gc_id,omitempty"`
	RatType            RATType                `protobuf:"varint,14,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	HardwareAddr       []byte                 `protobuf:"bytes,15,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	CommonContext      *CommonSessionContext  `protobuf:"bytes,16,opt,name=common_context,json=commonContext,proto3" json:"common_context,omitempty"`
	RatSpecificContext *RatSpecificContext    `protobuf:"bytes,17,opt,name=rat_specific_context,json=ratSpecificContext,proto3" json:"rat_specific_context,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{28}
}

func (x *CreateSessionRequest) GetSubscriber() *SubscriberID {
	if x != nil {
		return x.Subscriber
	}
	return nil
}

func (x *CreateSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionRequest) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *CreateSessionRequest) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *CreateSessionRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *CreateSessionRequest) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *CreateSessionRequest) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *CreateSessionRequest) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *CreateSessionRequest) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *CreateSessionRequest) GetQosInfo() *QosInformationRequest {
	if x != nil {
		return x.QosInfo
	}
	return nil
}

func (x *CreateSessionRequest) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *CreateSessionRequest) GetGcId() string {
	if x != nil {
		return x.GcId
	}
	return ""
}

func (x *CreateSessionRequest) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *CreateSessionRequest) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *CreateSessionRequest) GetCommonContext() *CommonSessionContext {
	if x != nil {
		return x.CommonContext
	}
	return nil
}

func (x *CreateSessionRequest) GetRatSpecificContext() *RatSpecificContext {
	if x != nil {
		return x.RatSpecificContext
	}
	return nil
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credits          []*CreditUpdateResponse          `protobuf:"bytes,1,rep,name=credits,proto3" json:"credits,omitempty"` // these will only have updates
	UsageMonitors    []*UsageMonitoringUpdateResponse `protobuf:"bytes,6,rep,name=usage_monitors,json=usageMonitors,proto3" json:"usage_monitors,omitempty"`
	StaticRules      []*StaticRuleInstall             `protobuf:"bytes,7,rep,name=static_rules,json=staticRules,proto3" json:"static_rules,omitempty"`    // static rules
	DynamicRules     []*DynamicRuleInstall            `protobuf:"bytes,8,rep,name=dynamic_rules,json=dynamicRules,proto3" json:"dynamic_rules,omitempty"` // dynamic rules
	SessionId        string                           `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TgppCtx          *TgppContext                     `protobuf:"bytes,10,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
	EventTriggers    []EventTrigger                   `protobuf:"varint,11,rep,packed,name=event_triggers,json=eventTriggers,proto3,enum=magma.lte.EventTrigger" json:"event_triggers,omitempty"`
	RevalidationTime *timestamp.Timestamp             `protobuf:"bytes,12,opt,name=revalidation_time,json=revalidationTime,proto3" json:"revalidation_time,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{29}
}

func (x *CreateSessionResponse) GetCredits() []*CreditUpdateResponse {
	if x != nil {
		return x.Credits
	}
	return nil
}

func (x *CreateSessionResponse) GetUsageMonitors() []*UsageMonitoringUpdateResponse {
	if x != nil {
		return x.UsageMonitors
	}
	return nil
}

func (x *CreateSessionResponse) GetStaticRules() []*StaticRuleInstall {
	if x != nil {
		return x.StaticRules
	}
	return nil
}

func (x *CreateSessionResponse) GetDynamicRules() []*DynamicRuleInstall {
	if x != nil {
		return x.DynamicRules
	}
	return nil
}

func (x *CreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionResponse) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

func (x *CreateSessionResponse) GetEventTriggers() []EventTrigger {
	if x != nil {
		return x.EventTriggers
	}
	return nil
}

func (x *CreateSessionResponse) GetRevalidationTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevalidationTime
	}
	return nil
}

type StaticRuleInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId         string               `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ActivationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	// Optional field. Set as 0 to mark as unused
	DeactivationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
}

func (x *StaticRuleInstall) Reset() {
	*x = StaticRuleInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticRuleInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRuleInstall) ProtoMessage() {}

func (x *StaticRuleInstall) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRuleInstall.ProtoReflect.Descriptor instead.
func (*StaticRuleInstall) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{30}
}

func (x *StaticRuleInstall) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *StaticRuleInstall) GetActivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *StaticRuleInstall) GetDeactivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeactivationTime
	}
	return nil
}

type DynamicRuleInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyRule     *PolicyRule          `protobuf:"bytes,1,opt,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
	ActivationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	// Optional field. Set as 0 to mark as unused
	DeactivationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deactivation_time,json=deactivationTime,proto3" json:"deactivation_time,omitempty"`
}

func (x *DynamicRuleInstall) Reset() {
	*x = DynamicRuleInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicRuleInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicRuleInstall) ProtoMessage() {}

func (x *DynamicRuleInstall) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicRuleInstall.ProtoReflect.Descriptor instead.
func (*DynamicRuleInstall) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{31}
}

func (x *DynamicRuleInstall) GetPolicyRule() *PolicyRule {
	if x != nil {
		return x.PolicyRule
	}
	return nil
}

func (x *DynamicRuleInstall) GetActivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *DynamicRuleInstall) GetDeactivationTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeactivationTime
	}
	return nil
}

type UpdateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates       []*CreditUsageUpdate            `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	UsageMonitors []*UsageMonitoringUpdateRequest `protobuf:"bytes,3,rep,name=usage_monitors,json=usageMonitors,proto3" json:"usage_monitors,omitempty"`
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateSessionRequest) GetUpdates() []*CreditUsageUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateSessionRequest) GetUsageMonitors() []*UsageMonitoringUpdateRequest {
	if x != nil {
		return x.UsageMonitors
	}
	return nil
}

type UpdateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses             []*CreditUpdateResponse          `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	UsageMonitorResponses []*UsageMonitoringUpdateResponse `protobuf:"bytes,3,rep,name=usage_monitor_responses,json=usageMonitorResponses,proto3" json:"usage_monitor_responses,omitempty"`
}

func (x *UpdateSessionResponse) Reset() {
	*x = UpdateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionResponse) ProtoMessage() {}

func (x *UpdateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateSessionResponse) GetResponses() []*CreditUpdateResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *UpdateSessionResponse) GetUsageMonitorResponses() []*UsageMonitoringUpdateResponse {
	if x != nil {
		return x.UsageMonitorResponses
	}
	return nil
}

type SessionTerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid       string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionTerminateResponse) Reset() {
	*x = SessionTerminateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateResponse) ProtoMessage() {}

func (x *SessionTerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateResponse.ProtoReflect.Descriptor instead.
func (*SessionTerminateResponse) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{34}
}

func (x *SessionTerminateResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *SessionTerminateResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SessionTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid           string                `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // System Identification Number
	SessionId     string                `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Apn           string                `protobuf:"bytes,3,opt,name=apn,proto3" json:"apn,omitempty"`
	RequestNumber uint32                `protobuf:"varint,4,opt,name=request_number,json=requestNumber,proto3" json:"request_number,omitempty"`
	CreditUsages  []*CreditUsage        `protobuf:"bytes,5,rep,name=credit_usages,json=creditUsages,proto3" json:"credit_usages,omitempty"`
	MonitorUsages []*UsageMonitorUpdate `protobuf:"bytes,6,rep,name=monitor_usages,json=monitorUsages,proto3" json:"monitor_usages,omitempty"`
	UeIpv4        string                `protobuf:"bytes,7,opt,name=ue_ipv4,json=ueIpv4,proto3" json:"ue_ipv4,omitempty"`
	Msisdn        []byte                `protobuf:"bytes,8,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	SpgwIpv4      string                `protobuf:"bytes,9,opt,name=spgw_ipv4,json=spgwIpv4,proto3" json:"spgw_ipv4,omitempty"`
	Imei          string                `protobuf:"bytes,10,opt,name=imei,proto3" json:"imei,omitempty"`
	PlmnId        string                `protobuf:"bytes,11,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	ImsiPlmnId    string                `protobuf:"bytes,12,opt,name=imsi_plmn_id,json=imsiPlmnId,proto3" json:"imsi_plmn_id,omitempty"`
	UserLocation  []byte                `protobuf:"bytes,13,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	RatType       RATType               `protobuf:"varint,14,opt,name=rat_type,json=ratType,proto3,enum=magma.lte.RATType" json:"rat_type,omitempty"`
	HardwareAddr  []byte                `protobuf:"bytes,15,opt,name=hardware_addr,json=hardwareAddr,proto3" json:"hardware_addr,omitempty"` // MAC Address for WLAN
	TgppCtx       *TgppContext          `protobuf:"bytes,16,opt,name=tgpp_ctx,json=tgppCtx,proto3" json:"tgpp_ctx,omitempty"`
}

func (x *SessionTerminateRequest) Reset() {
	*x = SessionTerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTerminateRequest) ProtoMessage() {}

func (x *SessionTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTerminateRequest.ProtoReflect.Descriptor instead.
func (*SessionTerminateRequest) Descriptor() ([]byte, []int) {
	return file_session_manager_proto_rawDescGZIP(), []int{35}
}

func (x *SessionTerminateRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *SessionTerminateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionTerminateRequest) GetApn() string {
	if x != nil {
		return x.Apn
	}
	return ""
}

func (x *SessionTerminateRequest) GetRequestNumber() uint32 {
	if x != nil {
		return x.RequestNumber
	}
	return 0
}

func (x *SessionTerminateRequest) GetCreditUsages() []*CreditUsage {
	if x != nil {
		return x.CreditUsages
	}
	return nil
}

func (x *SessionTerminateRequest) GetMonitorUsages() []*UsageMonitorUpdate {
	if x != nil {
		return x.MonitorUsages
	}
	return nil
}

func (x *SessionTerminateRequest) GetUeIpv4() string {
	if x != nil {
		return x.UeIpv4
	}
	return ""
}

func (x *SessionTerminateRequest) GetMsisdn() []byte {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *SessionTerminateRequest) GetSpgwIpv4() string {
	if x != nil {
		return x.SpgwIpv4
	}
	return ""
}

func (x *SessionTerminateRequest) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *SessionTerminateRequest) GetPlmnId() string {
	if x != nil {
		return x.PlmnId
	}
	return ""
}

func (x *SessionTerminateRequest) GetImsiPlmnId() string {
	if x != nil {
		return x.ImsiPlmnId
	}
	return ""
}

func (x *SessionTerminateRequest) GetUserLocation() []byte {
	if x != nil {
		return x.UserLocation
	}
	return nil
}

func (x *SessionTerminateRequest) GetRatType() RATType {
	if x != nil {
		return x.RatType
	}
	return RATType_TGPP_LTE
}

func (x *SessionTerminateRequest) GetHardwareAddr() []byte {
	if x != nil {
		return x.HardwareAddr
	}
	return nil
}

func (x *SessionTerminateRequest) GetTgppCtx() *TgppContext {
	if x != nil {
		return x.TgppCtx
	}
	return nil
}

var File_session_manager_proto protoreflect.FileDescriptor

var file_session_manager_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x78, 0x22, 0x58, 0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x8d,
	0x05, 0x0a, 0x19, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70, 0x76, 0x34, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x70, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6d, 0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x72, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a,
	0x14, 0x72, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb3,
	0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d,
	0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x6c,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x54, 0x45,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x6c, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x0c,
	0x77, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x57,
	0x4c, 0x41, 0x4e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x11,
	0x4c, 0x54, 0x45, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70, 0x76, 0x34, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a,
	0x12, 0x57, 0x4c, 0x41, 0x4e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x55, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45,
	0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa3, 0x02, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xab, 0x04, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x15, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x18,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x52, 0x16, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f,
	0x0a, 0x0e, 0x51, 0x6f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x03, 0x71, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x51, 0x43, 0x49, 0x52, 0x03, 0x71, 0x63, 0x69, 0x22,
	0x95, 0x08, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x10, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x05, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x57, 0x5f, 0x50, 0x43, 0x45, 0x46, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x52, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45,
	0x52, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x53,
	0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52, 0x10,
	0x0d, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x46, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x42, 0x45,
	0x41, 0x52, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x5f, 0x47, 0x57, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x15, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x5f, 0x52, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x4e, 0x42, 0x49, 0x46, 0x4f, 0x4d, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x1a, 0x22, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x02, 0x74, 0x78, 0x12, 0x25, 0x0a,
	0x02, 0x72, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x02, 0x72, 0x78, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56,
	0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x50, 0x5f, 0x55, 0x52,
	0x49, 0x10, 0x03, 0x22, 0xb9, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x48,
	0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x08, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x22, 0x3f,
	0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22,
	0xd5, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x48, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x45, 0x58, 0x48, 0x41,
	0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x22, 0x8d, 0x05, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65,
	0x49, 0x70, 0x76, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x74,
	0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12, 0x46,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74,
	0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x22, 0xa3,
	0x01, 0x0a, 0x12, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x78, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x3f,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x8b, 0x03, 0x0a, 0x1c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65,
	0x49, 0x70, 0x76, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x72, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x67, 0x70, 0x70,
	0x5f, 0x63, 0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12, 0x3c, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xd6, 0x04, 0x0a, 0x1d, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12,
	0x31, 0x0a, 0x08, 0x74, 0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43,
	0x74, 0x78, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x70, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x5f, 0x64, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x70, 0x6e, 0x41, 0x6d, 0x62, 0x72, 0x44, 0x6c, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x70, 0x6e, 0x5f, 0x61, 0x6d, 0x62, 0x72, 0x5f, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x70, 0x6e, 0x41, 0x6d, 0x62, 0x72, 0x55, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x0b, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x78, 0x44, 0x65,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x79,
	0x44, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x81, 0x05, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x65, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x65, 0x49, 0x70,
	0x76, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70, 0x76, 0x34, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6d, 0x73, 0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x63, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x41,
	0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x72,
	0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x72, 0x61, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x83, 0x04, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d,
	0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x67, 0x70, 0x70, 0x5f, 0x63,
	0x74, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xda, 0x01, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xb8, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x15, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x18, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcf, 0x04, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x70, 0x67, 0x77, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x67, 0x77, 0x49, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x73,
	0x69, 0x5f, 0x70, 0x6c, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6d, 0x73, 0x69, 0x50, 0x6c, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52,
	0x41, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x67, 0x70, 0x70, 0x5f, 0x63, 0x74, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c,
	0x74, 0x65, 0x2e, 0x54, 0x67, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x74, 0x67, 0x70, 0x70, 0x43, 0x74, 0x78, 0x2a, 0x26, 0x0a, 0x07, 0x52, 0x41, 0x54, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x47, 0x50, 0x50, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x47, 0x50, 0x50, 0x5f, 0x57, 0x4c, 0x41, 0x4e, 0x10, 0x01, 0x2a,
	0xb3, 0x09, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x47, 0x53, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x46, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x4d, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45,
	0x41, 0x52, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x26, 0x0a, 0x22, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x49,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12,
	0x19, 0x0a, 0x15, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x50, 0x53, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x14, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x4e, 0x5f, 0x47, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x47, 0x57, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x18, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x49, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x47, 0x49, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50,
	0x4e, 0x5f, 0x41, 0x4d, 0x42, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x1d, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x21,
	0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x50, 0x53, 0x5f,
	0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x22, 0x12, 0x31, 0x0a, 0x2d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x53, 0x47, 0x5f, 0x48, 0x59,
	0x42, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x23, 0x12, 0x33, 0x0a, 0x2f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x53, 0x47,
	0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x28, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x45, 0x4e, 0x42, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2c, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x2d, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x2e, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2f, 0x12, 0x3b, 0x0a, 0x37, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x30, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x31, 0x2a, 0xbb, 0x01, 0x0a, 0x03, 0x51, 0x43, 0x49, 0x12, 0x09, 0x0a,
	0x05, 0x51, 0x43, 0x49, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49,
	0x5f, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x35, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43,
	0x49, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x38, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x49, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x51,
	0x43, 0x49, 0x5f, 0x36, 0x35, 0x10, 0x41, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x36,
	0x36, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x36, 0x37, 0x10, 0x43, 0x12,
	0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x37, 0x30, 0x10, 0x46, 0x12, 0x0a, 0x0a, 0x06, 0x51,
	0x43, 0x49, 0x5f, 0x37, 0x35, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x43, 0x49, 0x5f, 0x37,
	0x39, 0x10, 0x4f, 0x2a, 0x65, 0x0a, 0x0c, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x43, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10,
	0x01, 0x32, 0x90, 0x02, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6d,
	0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x38, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0a, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xbf, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x32, 0xa5, 0x02, 0x0a, 0x18, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x67,
	0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61,
	0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e, 0x6c, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2e,
	0x6c, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x37,
	0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d,
	0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6d, 0x61, 0x67, 0x6d, 0x61, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_session_manager_proto_rawDescOnce sync.Once
	file_session_manager_proto_rawDescData = file_session_manager_proto_rawDesc
)

func file_session_manager_proto_rawDescGZIP() []byte {
	file_session_manager_proto_rawDescOnce.Do(func() {
		file_session_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_session_manager_proto_rawDescData)
	})
	return file_session_manager_proto_rawDescData
}

var file_session_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_session_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_session_manager_proto_goTypes = []interface{}{
	(RATType)(0),                            // 0: magma.lte.RATType
	(EventTrigger)(0),                       // 1: magma.lte.EventTrigger
	(QCI)(0),                                // 2: magma.lte.QCI
	(ReAuthResult)(0),                       // 3: magma.lte.ReAuthResult
	(CreditLimitType)(0),                    // 4: magma.lte.CreditLimitType
	(MonitoringLevel)(0),                    // 5: magma.lte.MonitoringLevel
	(ChargingReAuthRequest_Type)(0),         // 6: magma.lte.ChargingReAuthRequest.Type
	(PolicyReAuthAnswer_FailureCode)(0),     // 7: magma.lte.PolicyReAuthAnswer.FailureCode
	(RedirectServer_RedirectAddressType)(0), // 8: magma.lte.RedirectServer.RedirectAddressType
	(ChargingCredit_UnitType)(0),            // 9: magma.lte.ChargingCredit.UnitType
	(ChargingCredit_FinalAction)(0),         // 10: magma.lte.ChargingCredit.FinalAction
	(CreditUsage_UpdateType)(0),             // 11: magma.lte.CreditUsage.UpdateType
	(UsageMonitoringCredit_Action)(0),       // 12: magma.lte.UsageMonitoringCredit.Action
	(*RuleRecord)(nil),                      // 13: magma.lte.RuleRecord
	(*RuleRecordTable)(nil),                 // 14: magma.lte.RuleRecordTable
	(*LocalCreateSessionRequest)(nil),       // 15: magma.lte.LocalCreateSessionRequest
	(*CommonSessionContext)(nil),            // 16: magma.lte.CommonSessionContext
	(*RatSpecificContext)(nil),              // 17: magma.lte.RatSpecificContext
	(*LTESessionContext)(nil),               // 18: magma.lte.LTESessionContext
	(*WLANSessionContext)(nil),              // 19: magma.lte.WLANSessionContext
	(*LocalCreateSessionResponse)(nil),      // 20: magma.lte.LocalCreateSessionResponse
	(*LocalEndSessionRequest)(nil),          // 21: magma.lte.LocalEndSessionRequest
	(*LocalEndSessionResponse)(nil),         // 22: magma.lte.LocalEndSessionResponse
	(*ChargingReAuthRequest)(nil),           // 23: magma.lte.ChargingReAuthRequest
	(*ChargingReAuthAnswer)(nil),            // 24: magma.lte.ChargingReAuthAnswer
	(*PolicyReAuthRequest)(nil),             // 25: magma.lte.PolicyReAuthRequest
	(*QoSInformation)(nil),                  // 26: magma.lte.QoSInformation
	(*PolicyReAuthAnswer)(nil),              // 27: magma.lte.PolicyReAuthAnswer
	(*CreditUnit)(nil),                      // 28: magma.lte.CreditUnit
	(*GrantedUnits)(nil),                    // 29: magma.lte.GrantedUnits
	(*RedirectServer)(nil),                  // 30: magma.lte.RedirectServer
	(*ChargingCredit)(nil),                  // 31: magma.lte.ChargingCredit
	(*CreditUsage)(nil),                     // 32: magma.lte.CreditUsage
	(*CreditUsageUpdate)(nil),               // 33: magma.lte.CreditUsageUpdate
	(*CreditUpdateResponse)(nil),            // 34: magma.lte.CreditUpdateResponse
	(*UsageMonitorUpdate)(nil),              // 35: magma.lte.UsageMonitorUpdate
	(*UsageMonitoringCredit)(nil),           // 36: magma.lte.UsageMonitoringCredit
	(*UsageMonitoringUpdateRequest)(nil),    // 37: magma.lte.UsageMonitoringUpdateRequest
	(*UsageMonitoringUpdateResponse)(nil),   // 38: magma.lte.UsageMonitoringUpdateResponse
	(*QosInformationRequest)(nil),           // 39: magma.lte.QosInformationRequest
	(*TgppContext)(nil),                     // 40: magma.lte.TgppContext
	(*CreateSessionRequest)(nil),            // 41: magma.lte.CreateSessionRequest
	(*CreateSessionResponse)(nil),           // 42: magma.lte.CreateSessionResponse
	(*StaticRuleInstall)(nil),               // 43: magma.lte.StaticRuleInstall
	(*DynamicRuleInstall)(nil),              // 44: magma.lte.DynamicRuleInstall
	(*UpdateSessionRequest)(nil),            // 45: magma.lte.UpdateSessionRequest
	(*UpdateSessionResponse)(nil),           // 46: magma.lte.UpdateSessionResponse
	(*SessionTerminateResponse)(nil),        // 47: magma.lte.SessionTerminateResponse
	(*SessionTerminateRequest)(nil),         // 48: magma.lte.SessionTerminateRequest
	nil,                                     // 49: magma.lte.PolicyReAuthAnswer.FailedRulesEntry
	(*SubscriberID)(nil),                    // 50: magma.lte.SubscriberID
	(*ServiceIdentifier)(nil),               // 51: magma.lte.ServiceIdentifier
	(*timestamp.Timestamp)(nil),             // 52: google.protobuf.Timestamp
	(*PolicyRule)(nil),                      // 53: magma.lte.PolicyRule
	(*protos.Void)(nil),                     // 54: magma.orc8r.Void
}
var file_session_manager_proto_depIdxs = []int32{
	13, // 0: magma.lte.RuleRecordTable.records:type_name -> magma.lte.RuleRecord
	50, // 1: magma.lte.LocalCreateSessionRequest.sid:type_name -> magma.lte.SubscriberID
	39, // 2: magma.lte.LocalCreateSessionRequest.qos_info:type_name -> magma.lte.QosInformationRequest
	0,  // 3: magma.lte.LocalCreateSessionRequest.rat_type:type_name -> magma.lte.RATType
	16, // 4: magma.lte.LocalCreateSessionRequest.common_context:type_name -> magma.lte.CommonSessionContext
	17, // 5: magma.lte.LocalCreateSessionRequest.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	50, // 6: magma.lte.CommonSessionContext.sid:type_name -> magma.lte.SubscriberID
	0,  // 7: magma.lte.CommonSessionContext.rat_type:type_name -> magma.lte.RATType
	18, // 8: magma.lte.RatSpecificContext.lte_context:type_name -> magma.lte.LTESessionContext
	19, // 9: magma.lte.RatSpecificContext.wlan_context:type_name -> magma.lte.WLANSessionContext
	39, // 10: magma.lte.LTESessionContext.qos_info:type_name -> magma.lte.QosInformationRequest
	50, // 11: magma.lte.LocalEndSessionRequest.sid:type_name -> magma.lte.SubscriberID
	6,  // 12: magma.lte.ChargingReAuthRequest.type:type_name -> magma.lte.ChargingReAuthRequest.Type
	51, // 13: magma.lte.ChargingReAuthRequest.service_identifier:type_name -> magma.lte.ServiceIdentifier
	3,  // 14: magma.lte.ChargingReAuthAnswer.result:type_name -> magma.lte.ReAuthResult
	43, // 15: magma.lte.PolicyReAuthRequest.rules_to_install:type_name -> magma.lte.StaticRuleInstall
	44, // 16: magma.lte.PolicyReAuthRequest.dynamic_rules_to_install:type_name -> magma.lte.DynamicRuleInstall
	1,  // 17: magma.lte.PolicyReAuthRequest.event_triggers:type_name -> magma.lte.EventTrigger
	52, // 18: magma.lte.PolicyReAuthRequest.revalidation_time:type_name -> google.protobuf.Timestamp
	36, // 19: magma.lte.PolicyReAuthRequest.usage_monitoring_credits:type_name -> magma.lte.UsageMonitoringCredit
	26, // 20: magma.lte.PolicyReAuthRequest.qos_info:type_name -> magma.lte.QoSInformation
	2,  // 21: magma.lte.QoSInformation.qci:type_name -> magma.lte.QCI
	3,  // 22: magma.lte.PolicyReAuthAnswer.result:type_name -> magma.lte.ReAuthResult
	49, // 23: magma.lte.PolicyReAuthAnswer.failed_rules:type_name -> magma.lte.PolicyReAuthAnswer.FailedRulesEntry
	28, // 24: magma.lte.GrantedUnits.total:type_name -> magma.lte.CreditUnit
	28, // 25: magma.lte.GrantedUnits.tx:type_name -> magma.lte.CreditUnit
	28, // 26: magma.lte.GrantedUnits.rx:type_name -> magma.lte.CreditUnit
	8,  // 27: magma.lte.RedirectServer.redirect_address_type:type_name -> magma.lte.RedirectServer.RedirectAddressType
	9,  // 28: magma.lte.ChargingCredit.type:type_name -> magma.lte.ChargingCredit.UnitType
	10, // 29: magma.lte.ChargingCredit.final_action:type_name -> magma.lte.ChargingCredit.FinalAction
	29, // 30: magma.lte.ChargingCredit.granted_units:type_name -> magma.lte.GrantedUnits
	30, // 31: magma.lte.ChargingCredit.redirect_server:type_name -> magma.lte.RedirectServer
	11, // 32: magma.lte.CreditUsage.type:type_name -> magma.lte.CreditUsage.UpdateType
	51, // 33: magma.lte.CreditUsage.service_identifier:type_name -> magma.lte.ServiceIdentifier
	32, // 34: magma.lte.CreditUsageUpdate.usage:type_name -> magma.lte.CreditUsage
	0,  // 35: magma.lte.CreditUsageUpdate.rat_type:type_name -> magma.lte.RATType
	40, // 36: magma.lte.CreditUsageUpdate.tgpp_ctx:type_name -> magma.lte.TgppContext
	16, // 37: magma.lte.CreditUsageUpdate.common_context:type_name -> magma.lte.CommonSessionContext
	17, // 38: magma.lte.CreditUsageUpdate.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	31, // 39: magma.lte.CreditUpdateResponse.credit:type_name -> magma.lte.ChargingCredit
	51, // 40: magma.lte.CreditUpdateResponse.service_identifier:type_name -> magma.lte.ServiceIdentifier
	4,  // 41: magma.lte.CreditUpdateResponse.limit_type:type_name -> magma.lte.CreditLimitType
	40, // 42: magma.lte.CreditUpdateResponse.tgpp_ctx:type_name -> magma.lte.TgppContext
	5,  // 43: magma.lte.UsageMonitorUpdate.level:type_name -> magma.lte.MonitoringLevel
	12, // 44: magma.lte.UsageMonitoringCredit.action:type_name -> magma.lte.UsageMonitoringCredit.Action
	5,  // 45: magma.lte.UsageMonitoringCredit.level:type_name -> magma.lte.MonitoringLevel
	29, // 46: magma.lte.UsageMonitoringCredit.granted_units:type_name -> magma.lte.GrantedUnits
	35, // 47: magma.lte.UsageMonitoringUpdateRequest.update:type_name -> magma.lte.UsageMonitorUpdate
	0,  // 48: magma.lte.UsageMonitoringUpdateRequest.rat_type:type_name -> magma.lte.RATType
	40, // 49: magma.lte.UsageMonitoringUpdateRequest.tgpp_ctx:type_name -> magma.lte.TgppContext
	1,  // 50: magma.lte.UsageMonitoringUpdateRequest.event_trigger:type_name -> magma.lte.EventTrigger
	36, // 51: magma.lte.UsageMonitoringUpdateResponse.credit:type_name -> magma.lte.UsageMonitoringCredit
	1,  // 52: magma.lte.UsageMonitoringUpdateResponse.event_triggers:type_name -> magma.lte.EventTrigger
	52, // 53: magma.lte.UsageMonitoringUpdateResponse.revalidation_time:type_name -> google.protobuf.Timestamp
	43, // 54: magma.lte.UsageMonitoringUpdateResponse.static_rules_to_install:type_name -> magma.lte.StaticRuleInstall
	44, // 55: magma.lte.UsageMonitoringUpdateResponse.dynamic_rules_to_install:type_name -> magma.lte.DynamicRuleInstall
	40, // 56: magma.lte.UsageMonitoringUpdateResponse.tgpp_ctx:type_name -> magma.lte.TgppContext
	50, // 57: magma.lte.CreateSessionRequest.subscriber:type_name -> magma.lte.SubscriberID
	39, // 58: magma.lte.CreateSessionRequest.qos_info:type_name -> magma.lte.QosInformationRequest
	0,  // 59: magma.lte.CreateSessionRequest.rat_type:type_name -> magma.lte.RATType
	16, // 60: magma.lte.CreateSessionRequest.common_context:type_name -> magma.lte.CommonSessionContext
	17, // 61: magma.lte.CreateSessionRequest.rat_specific_context:type_name -> magma.lte.RatSpecificContext
	34, // 62: magma.lte.CreateSessionResponse.credits:type_name -> magma.lte.CreditUpdateResponse
	38, // 63: magma.lte.CreateSessionResponse.usage_monitors:type_name -> magma.lte.UsageMonitoringUpdateResponse
	43, // 64: magma.lte.CreateSessionResponse.static_rules:type_name -> magma.lte.StaticRuleInstall
	44, // 65: magma.lte.CreateSessionResponse.dynamic_rules:type_name -> magma.lte.DynamicRuleInstall
	40, // 66: magma.lte.CreateSessionResponse.tgpp_ctx:type_name -> magma.lte.TgppContext
	1,  // 67: magma.lte.CreateSessionResponse.event_triggers:type_name -> magma.lte.EventTrigger
	52, // 68: magma.lte.CreateSessionResponse.revalidation_time:type_name -> google.protobuf.Timestamp
	52, // 69: magma.lte.StaticRuleInstall.activation_time:type_name -> google.protobuf.Timestamp
	52, // 70: magma.lte.StaticRuleInstall.deactivation_time:type_name -> google.protobuf.Timestamp
	53, // 71: magma.lte.DynamicRuleInstall.policy_rule:type_name -> magma.lte.PolicyRule
	52, // 72: magma.lte.DynamicRuleInstall.activation_time:type_name -> google.protobuf.Timestamp
	52, // 73: magma.lte.DynamicRuleInstall.deactivation_time:type_name -> google.protobuf.Timestamp
	33, // 74: magma.lte.UpdateSessionRequest.updates:type_name -> magma.lte.CreditUsageUpdate
	37, // 75: magma.lte.UpdateSessionRequest.usage_monitors:type_name -> magma.lte.UsageMonitoringUpdateRequest
	34, // 76: magma.lte.UpdateSessionResponse.responses:type_name -> magma.lte.CreditUpdateResponse
	38, // 77: magma.lte.UpdateSessionResponse.usage_monitor_responses:type_name -> magma.lte.UsageMonitoringUpdateResponse
	32, // 78: magma.lte.SessionTerminateRequest.credit_usages:type_name -> magma.lte.CreditUsage
	35, // 79: magma.lte.SessionTerminateRequest.monitor_usages:type_name -> magma.lte.UsageMonitorUpdate
	0,  // 80: magma.lte.SessionTerminateRequest.rat_type:type_name -> magma.lte.RATType
	40, // 81: magma.lte.SessionTerminateRequest.tgpp_ctx:type_name -> magma.lte.TgppContext
	7,  // 82: magma.lte.PolicyReAuthAnswer.FailedRulesEntry.value:type_name -> magma.lte.PolicyReAuthAnswer.FailureCode
	14, // 83: magma.lte.LocalSessionManager.ReportRuleStats:input_type -> magma.lte.RuleRecordTable
	15, // 84: magma.lte.LocalSessionManager.CreateSession:input_type -> magma.lte.LocalCreateSessionRequest
	21, // 85: magma.lte.LocalSessionManager.EndSession:input_type -> magma.lte.LocalEndSessionRequest
	23, // 86: magma.lte.SessionProxyResponder.ChargingReAuth:input_type -> magma.lte.ChargingReAuthRequest
	25, // 87: magma.lte.SessionProxyResponder.PolicyReAuth:input_type -> magma.lte.PolicyReAuthRequest
	41, // 88: magma.lte.CentralSessionController.CreateSession:input_type -> magma.lte.CreateSessionRequest
	45, // 89: magma.lte.CentralSessionController.UpdateSession:input_type -> magma.lte.UpdateSessionRequest
	48, // 90: magma.lte.CentralSessionController.TerminateSession:input_type -> magma.lte.SessionTerminateRequest
	54, // 91: magma.lte.LocalSessionManager.ReportRuleStats:output_type -> magma.orc8r.Void
	20, // 92: magma.lte.LocalSessionManager.CreateSession:output_type -> magma.lte.LocalCreateSessionResponse
	22, // 93: magma.lte.LocalSessionManager.EndSession:output_type -> magma.lte.LocalEndSessionResponse
	24, // 94: magma.lte.SessionProxyResponder.ChargingReAuth:output_type -> magma.lte.ChargingReAuthAnswer
	27, // 95: magma.lte.SessionProxyResponder.PolicyReAuth:output_type -> magma.lte.PolicyReAuthAnswer
	42, // 96: magma.lte.CentralSessionController.CreateSession:output_type -> magma.lte.CreateSessionResponse
	46, // 97: magma.lte.CentralSessionController.UpdateSession:output_type -> magma.lte.UpdateSessionResponse
	47, // 98: magma.lte.CentralSessionController.TerminateSession:output_type -> magma.lte.SessionTerminateResponse
	91, // [91:99] is the sub-list for method output_type
	83, // [83:91] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_session_manager_proto_init() }
func file_session_manager_proto_init() {
	if File_session_manager_proto != nil {
		return
	}
	file_policydb_proto_init()
	file_subscriberdb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_session_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRecordTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatSpecificContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTESessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WLANSessionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalEndSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalEndSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingReAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingReAuthAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyReAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyReAuthAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitorUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringCredit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageMonitoringUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TgppContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticRuleInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicRuleInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_session_manager_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RatSpecificContext_LteContext)(nil),
		(*RatSpecificContext_WlanContext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_session_manager_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_session_manager_proto_goTypes,
		DependencyIndexes: file_session_manager_proto_depIdxs,
		EnumInfos:         file_session_manager_proto_enumTypes,
		MessageInfos:      file_session_manager_proto_msgTypes,
	}.Build()
	File_session_manager_proto = out.File
	file_session_manager_proto_rawDesc = nil
	file_session_manager_proto_goTypes = nil
	file_session_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocalSessionManagerClient is the client API for LocalSessionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalSessionManagerClient interface {
	ReportRuleStats(ctx context.Context, in *RuleRecordTable, opts ...grpc.CallOption) (*protos.Void, error)
	CreateSession(ctx context.Context, in *LocalCreateSessionRequest, opts ...grpc.CallOption) (*LocalCreateSessionResponse, error)
	EndSession(ctx context.Context, in *LocalEndSessionRequest, opts ...grpc.CallOption) (*LocalEndSessionResponse, error)
}

type localSessionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalSessionManagerClient(cc grpc.ClientConnInterface) LocalSessionManagerClient {
	return &localSessionManagerClient{cc}
}

func (c *localSessionManagerClient) ReportRuleStats(ctx context.Context, in *RuleRecordTable, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/ReportRuleStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) CreateSession(ctx context.Context, in *LocalCreateSessionRequest, opts ...grpc.CallOption) (*LocalCreateSessionResponse, error) {
	out := new(LocalCreateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSessionManagerClient) EndSession(ctx context.Context, in *LocalEndSessionRequest, opts ...grpc.CallOption) (*LocalEndSessionResponse, error) {
	out := new(LocalEndSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.LocalSessionManager/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalSessionManagerServer is the server API for LocalSessionManager service.
type LocalSessionManagerServer interface {
	ReportRuleStats(context.Context, *RuleRecordTable) (*protos.Void, error)
	CreateSession(context.Context, *LocalCreateSessionRequest) (*LocalCreateSessionResponse, error)
	EndSession(context.Context, *LocalEndSessionRequest) (*LocalEndSessionResponse, error)
}

// UnimplementedLocalSessionManagerServer can be embedded to have forward compatible implementations.
type UnimplementedLocalSessionManagerServer struct {
}

func (*UnimplementedLocalSessionManagerServer) ReportRuleStats(context.Context, *RuleRecordTable) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRuleStats not implemented")
}
func (*UnimplementedLocalSessionManagerServer) CreateSession(context.Context, *LocalCreateSessionRequest) (*LocalCreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedLocalSessionManagerServer) EndSession(context.Context, *LocalEndSessionRequest) (*LocalEndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}

func RegisterLocalSessionManagerServer(s *grpc.Server, srv LocalSessionManagerServer) {
	s.RegisterService(&_LocalSessionManager_serviceDesc, srv)
}

func _LocalSessionManager_ReportRuleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRecordTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).ReportRuleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/ReportRuleStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).ReportRuleStats(ctx, req.(*RuleRecordTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalCreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).CreateSession(ctx, req.(*LocalCreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalSessionManager_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalEndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSessionManagerServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.LocalSessionManager/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSessionManagerServer).EndSession(ctx, req.(*LocalEndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalSessionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.LocalSessionManager",
	HandlerType: (*LocalSessionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportRuleStats",
			Handler:    _LocalSessionManager_ReportRuleStats_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _LocalSessionManager_CreateSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _LocalSessionManager_EndSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session_manager.proto",
}

// SessionProxyResponderClient is the client API for SessionProxyResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionProxyResponderClient interface {
	ChargingReAuth(ctx context.Context, in *ChargingReAuthRequest, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error)
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	//
	PolicyReAuth(ctx context.Context, in *PolicyReAuthRequest, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error)
}

type sessionProxyResponderClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionProxyResponderClient(cc grpc.ClientConnInterface) SessionProxyResponderClient {
	return &sessionProxyResponderClient{cc}
}

func (c *sessionProxyResponderClient) ChargingReAuth(ctx context.Context, in *ChargingReAuthRequest, opts ...grpc.CallOption) (*ChargingReAuthAnswer, error) {
	out := new(ChargingReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.SessionProxyResponder/ChargingReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionProxyResponderClient) PolicyReAuth(ctx context.Context, in *PolicyReAuthRequest, opts ...grpc.CallOption) (*PolicyReAuthAnswer, error) {
	out := new(PolicyReAuthAnswer)
	err := c.cc.Invoke(ctx, "/magma.lte.SessionProxyResponder/PolicyReAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionProxyResponderServer is the server API for SessionProxyResponder service.
type SessionProxyResponderServer interface {
	ChargingReAuth(context.Context, *ChargingReAuthRequest) (*ChargingReAuthAnswer, error)
	// NOTE: if no session_id is specified, apply to all sessions for the IMSI
	//
	PolicyReAuth(context.Context, *PolicyReAuthRequest) (*PolicyReAuthAnswer, error)
}

// UnimplementedSessionProxyResponderServer can be embedded to have forward compatible implementations.
type UnimplementedSessionProxyResponderServer struct {
}

func (*UnimplementedSessionProxyResponderServer) ChargingReAuth(context.Context, *ChargingReAuthRequest) (*ChargingReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargingReAuth not implemented")
}
func (*UnimplementedSessionProxyResponderServer) PolicyReAuth(context.Context, *PolicyReAuthRequest) (*PolicyReAuthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyReAuth not implemented")
}

func RegisterSessionProxyResponderServer(s *grpc.Server, srv SessionProxyResponderServer) {
	s.RegisterService(&_SessionProxyResponder_serviceDesc, srv)
}

func _SessionProxyResponder_ChargingReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargingReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionProxyResponderServer).ChargingReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SessionProxyResponder/ChargingReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionProxyResponderServer).ChargingReAuth(ctx, req.(*ChargingReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionProxyResponder_PolicyReAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionProxyResponderServer).PolicyReAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SessionProxyResponder/PolicyReAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionProxyResponderServer).PolicyReAuth(ctx, req.(*PolicyReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionProxyResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SessionProxyResponder",
	HandlerType: (*SessionProxyResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChargingReAuth",
			Handler:    _SessionProxyResponder_ChargingReAuth_Handler,
		},
		{
			MethodName: "PolicyReAuth",
			Handler:    _SessionProxyResponder_PolicyReAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session_manager.proto",
}

// CentralSessionControllerClient is the client API for CentralSessionController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CentralSessionControllerClient interface {
	// Notify OCS/PCRF of new session and return rules associated with subscriber
	// along with credits for each rule
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Updates OCS/PCRF with used credit and terminations from gateway
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	// Terminates session in OCS/PCRF for a subscriber
	TerminateSession(ctx context.Context, in *SessionTerminateRequest, opts ...grpc.CallOption) (*SessionTerminateResponse, error)
}

type centralSessionControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralSessionControllerClient(cc grpc.ClientConnInterface) CentralSessionControllerClient {
	return &centralSessionControllerClient{cc}
}

func (c *centralSessionControllerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralSessionControllerClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralSessionControllerClient) TerminateSession(ctx context.Context, in *SessionTerminateRequest, opts ...grpc.CallOption) (*SessionTerminateResponse, error) {
	out := new(SessionTerminateResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.CentralSessionController/TerminateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralSessionControllerServer is the server API for CentralSessionController service.
type CentralSessionControllerServer interface {
	// Notify OCS/PCRF of new session and return rules associated with subscriber
	// along with credits for each rule
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Updates OCS/PCRF with used credit and terminations from gateway
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	// Terminates session in OCS/PCRF for a subscriber
	TerminateSession(context.Context, *SessionTerminateRequest) (*SessionTerminateResponse, error)
}

// UnimplementedCentralSessionControllerServer can be embedded to have forward compatible implementations.
type UnimplementedCentralSessionControllerServer struct {
}

func (*UnimplementedCentralSessionControllerServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedCentralSessionControllerServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (*UnimplementedCentralSessionControllerServer) TerminateSession(context.Context, *SessionTerminateRequest) (*SessionTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSession not implemented")
}

func RegisterCentralSessionControllerServer(s *grpc.Server, srv CentralSessionControllerServer) {
	s.RegisterService(&_CentralSessionController_serviceDesc, srv)
}

func _CentralSessionController_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralSessionController_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralSessionController_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSessionControllerServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.CentralSessionController/TerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSessionControllerServer).TerminateSession(ctx, req.(*SessionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CentralSessionController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.CentralSessionController",
	HandlerType: (*CentralSessionControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _CentralSessionController_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _CentralSessionController_UpdateSession_Handler,
		},
		{
			MethodName: "TerminateSession",
			Handler:    _CentralSessionController_TerminateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session_manager.proto",
}
